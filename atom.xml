<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>梓川从不吃糖</title>
  
  
  <link href="http://zicuan123.github.io/atom.xml" rel="self"/>
  
  <link href="http://zicuan123.github.io/"/>
  <updated>2022-08-23T13:00:02.455Z</updated>
  <id>http://zicuan123.github.io/</id>
  
  <author>
    <name>梓川</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>各种API</title>
    <link href="http://zicuan123.github.io/2022/08/23/JS%E5%9F%BA%E7%A1%80/%E5%90%84%E7%A7%8DAPI/"/>
    <id>http://zicuan123.github.io/2022/08/23/JS%E5%9F%BA%E7%A1%80/%E5%90%84%E7%A7%8DAPI/</id>
    <published>2022-08-23T11:42:22.000Z</published>
    <updated>2022-08-23T13:00:02.455Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-字符串相关方法"><a href="#一-字符串相关方法" class="headerlink" title="一.字符串相关方法"></a>一.字符串相关方法</h2><span id="more"></span><blockquote><p>字符串的下标和长度只能获取属性,不能修改</p></blockquote><h4 id="1-字符串-charAt-下标-–-获取字符串的某一项"><a href="#1-字符串-charAt-下标-–-获取字符串的某一项" class="headerlink" title="1.字符串.charAt(下标) – 获取字符串的某一项"></a>1.字符串.charAt(下标) – 获取字符串的某一项</h4><blockquote><p>console.log( a.charAt(4) );</p></blockquote><h4 id="2-charCodeAt-下标-–-返回字符串指定位置的字符的-unicode-编码"><a href="#2-charCodeAt-下标-–-返回字符串指定位置的字符的-unicode-编码" class="headerlink" title="2. .charCodeAt(下标) – 返回字符串指定位置的字符的 unicode 编码"></a>2. .charCodeAt(下标) – 返回字符串指定位置的字符的 unicode 编码</h4><blockquote><p>console.log( a.charCodeAt(0) );</p></blockquote><h4 id="3-String-fromCharCode-字符编码-通过-unicode-编码返回对应的字符"><a href="#3-String-fromCharCode-字符编码-通过-unicode-编码返回对应的字符" class="headerlink" title="3. .String.fromCharCode(字符编码) - 通过 unicode 编码返回对应的字符"></a>3. .String.fromCharCode(字符编码) - 通过 unicode 编码返回对应的字符</h4><blockquote><p>console.log( String.fromCharCode(1234) );</p></blockquote><h4 id="4-substring-起始位置-结束位置-–-截取字符串-返回新字符串"><a href="#4-substring-起始位置-结束位置-–-截取字符串-返回新字符串" class="headerlink" title="4. .substring(起始位置,结束位置) – 截取字符串 [ ) 返回新字符串;"></a>4. .substring(起始位置,结束位置) – 截取字符串 [ ) 返回新字符串;</h4><blockquote><p>let b &#x3D; “亲,孤独终老吧!”<br>console.log( b.substring(2,4) );</p></blockquote><h4 id="5-substr-开始位置-长度-截取字符串-按照长度截取"><a href="#5-substr-开始位置-长度-截取字符串-按照长度截取" class="headerlink" title="5. .substr(开始位置,长度) 截取字符串 按照长度截取"></a>5. .substr(开始位置,长度) 截取字符串 按照长度截取</h4><blockquote><p>console.log( b.substr(2,6) );</p></blockquote><h4 id="6-toLowerCase-将获取的字符串变成小写"><a href="#6-toLowerCase-将获取的字符串变成小写" class="headerlink" title="6. .toLowerCase(),将获取的字符串变成小写"></a>6. .toLowerCase(),将获取的字符串变成小写</h4><h4 id="7-toUpperCase-将获取的字符串变成大写"><a href="#7-toUpperCase-将获取的字符串变成大写" class="headerlink" title="7. .toUpperCase(),将获取的字符串变成大写"></a>7. .toUpperCase(),将获取的字符串变成大写</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c = <span class="string">&#x27;aaaaabbbbbCCCC&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c.<span class="title function_">toLowerCase</span>()) <span class="comment">//aaaaabbbbbccc</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c.<span class="title function_">toUpperCase</span>()) <span class="comment">//AAAAABBBBBCCCC</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="8-x3D-x3D-split-切割界限-以参数为界限-对字符串进行切割-最终得到一个数组-不包含界限-x3D-x3D"><a href="#8-x3D-x3D-split-切割界限-以参数为界限-对字符串进行切割-最终得到一个数组-不包含界限-x3D-x3D" class="headerlink" title="8. &#x3D;&#x3D;.split(切割界限)- 以参数为界限,对字符串进行切割,最终得到一个数组(不包含界限)&#x3D;&#x3D;"></a>8. &#x3D;&#x3D;.split(切割界限)- 以参数为界限,对字符串进行切割,最终得到一个数组(不包含界限)&#x3D;&#x3D;</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="string">&#x27;小哥哥,郑建斌,西瓜,陈予洁,墨良&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>))</span><br><span class="line"><span class="keyword">let</span> e = <span class="string">&#x27;1/1/1/1&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>))</span><br></pre></td></tr></table></figure></blockquote><h4 id="9-indexOf-–-找出字符串中-某一个字符或者某一段字符-出现的位置-找不到返回-1"><a href="#9-indexOf-–-找出字符串中-某一个字符或者某一段字符-出现的位置-找不到返回-1" class="headerlink" title="9. .indexOf() – 找出字符串中,某一个字符或者某一段字符 出现的位置,找不到返回 -1"></a>9. .indexOf() – 找出字符串中,某一个字符或者某一段字符 出现的位置,找不到返回 -1</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">lastIndexOf</span>()  -- 返回结果和indexOf相同,检索方向从后往前</span><br><span class="line"><span class="keyword">let</span> f = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( f.<span class="title function_">indexOf</span>(<span class="string">&quot;w&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( f.<span class="title function_">indexOf</span>(<span class="string">&quot;lo&quot;</span>,<span class="number">3</span>));<span class="comment">// 从指定下标开始检索</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( f.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;l&quot;</span>,<span class="number">4</span>) );<span class="comment">// 在下标4之前检索</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="10-slice-截取字符串"><a href="#10-slice-截取字符串" class="headerlink" title="10. .slice() * 截取字符串"></a>10. .slice() * 截取字符串</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> g = <span class="string">&#x27;i am fine&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g.<span class="property">length</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g.<span class="title function_">slice</span>(<span class="number">4</span>)) <span class="comment">//  fine(包含起始位置4以后所有的字符串)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g.<span class="title function_">slice</span>(<span class="number">5</span>, <span class="number">7</span>)) <span class="comment">//fi(包含起始位置,不包含结束位置)</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="11-includes-startsWidth-endsWidth-都是返回布尔值"><a href="#11-includes-startsWidth-endsWidth-都是返回布尔值" class="headerlink" title="11. .includes(),.startsWidth(),.endsWidth() 都是返回布尔值"></a>11. .includes(),.startsWidth(),.endsWidth() 都是返回布尔值</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">includes</span>(<span class="string">&#x27;www&#x27;</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">startsWith</span>(<span class="string">&#x27;httpw&#x27;</span>)) <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">endsWith</span>(<span class="string">&#x27;.cn&#x27;</span>)) <span class="comment">//true</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="12-repeat-n-将字符串重复-n-次-如果-n-为小数-则舍去小数"><a href="#12-repeat-n-将字符串重复-n-次-如果-n-为小数-则舍去小数" class="headerlink" title="12..repeat(n),将字符串重复 n 次,如果 n 为小数,则舍去小数"></a>12..repeat(n),将字符串重复 n 次,如果 n 为小数,则舍去小数</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;豆沙&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">repeat</span>(<span class="number">5</span>)) <span class="comment">//豆沙豆沙豆沙豆沙豆沙</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="二-数组相关方法"><a href="#二-数组相关方法" class="headerlink" title="二.数组相关方法"></a>二.数组相关方法</h2><h4 id="1-使用-Array-构造函数创建数组"><a href="#1-使用-Array-构造函数创建数组" class="headerlink" title="1.使用 Array 构造函数创建数组"></a>1.使用 Array 构造函数创建数组</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors.<span class="property">length</span>)</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>如果预先知道数组要保存的项目数量,也可以给构造函数传递该数量,该数量会自动变成 length</p></blockquote><blockquote><p>可以向 Array 构造函数 传递数组中 应该包含的项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> col = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(col)</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>如果传递的是数值,则会按照该数值创建包含给定项数的数组<br>而如果是其他的参数类型,则会创建包含那个值的只有一项的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br></pre></td></tr></table></figure></blockquote><h4 id="2-数组字面量"><a href="#2-数组字面量" class="headerlink" title="2.数组字面量"></a>2.数组字面量</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> names = [] <span class="comment">// 创建一个空的数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names)</span><br></pre></td></tr></table></figure></blockquote><h4 id="3-特殊情况"><a href="#3-特殊情况" class="headerlink" title="3.特殊情况"></a>3.特殊情况</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> gg = [<span class="string">&#x27;gg&#x27;</span>, <span class="string">&#x27;dd&#x27;</span>, <span class="string">&#x27;kk&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gg.<span class="property">length</span>)</span><br><span class="line">gg.<span class="property">length</span> = <span class="number">2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gg)</span><br><span class="line">gg.<span class="property">length</span> = <span class="number">5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gg)</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>假设 数组的长度为 a<br>我们给数组设置一个 length 的属性值为 b,那么当 b &lt; a 时, 就把数组在第 b 个以后的项目删除</p><p>b &gt; a 时, 就把数组在第 a 个之后在增加 (b-a)个空项目</p></blockquote><h4 id="4-数组的检测"><a href="#4-数组的检测" class="headerlink" title="4.数组的检测:"></a>4.数组的检测:</h4><blockquote><p>待检测变量 instanceof Array<br>Array.isArray(待检测变量)</p></blockquote><h2 id="三-数组的操作方法"><a href="#三-数组的操作方法" class="headerlink" title="三.数组的操作方法"></a>三.数组的操作方法</h2><h4 id="1-push-–-向数组末尾增加一个数组项-数组的长度自动增加-1-会返回数组的新长度"><a href="#1-push-–-向数组末尾增加一个数组项-数组的长度自动增加-1-会返回数组的新长度" class="headerlink" title="1.push – 向数组末尾增加一个数组项,数组的长度自动增加 1,会返回数组的新长度"></a>1.push – 向数组末尾增加一个数组项,数组的长度自动增加 1,会返回数组的新长度</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">push</span>(数组项)</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;西瓜&#x27;</span>, <span class="string">&#x27;橘子&#x27;</span>, <span class="string">&#x27;木瓜&#x27;</span>]</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="string">&#x27;带娃&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line"><span class="keyword">let</span> length = arr.<span class="title function_">push</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(length) <span class="comment">//4</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="2-shift-–-删除数组的第一个数组项-数组长度自动减-1，会返回被删除的元素"><a href="#2-shift-–-删除数组的第一个数组项-数组长度自动减-1，会返回被删除的元素" class="headerlink" title="2.shift – 删除数组的第一个数组项,数组长度自动减 1，会返回被删除的元素"></a>2.shift – 删除数组的第一个数组项,数组长度自动减 1，会返回被删除的元素</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">shift</span>()</span><br><span class="line">arr.<span class="title function_">shift</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure></blockquote><h4 id="3-unshift-–-向数组开始位置增加一个数组项-数组长度自动-1-会返回数组的新长度"><a href="#3-unshift-–-向数组开始位置增加一个数组项-数组长度自动-1-会返回数组的新长度" class="headerlink" title="3.unshift – 向数组开始位置增加一个数组项,数组长度自动+1,会返回数组的新长度"></a>3.unshift – 向数组开始位置增加一个数组项,数组长度自动+1,会返回数组的新长度</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">unshift</span>(数组项)</span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="string">&#x27;柚子&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure></blockquote><h4 id="4-pop-–-删除数组的最后一个数组项目-数组的-length-自动-1，会返回被删除的元素"><a href="#4-pop-–-删除数组的最后一个数组项目-数组的-length-自动-1，会返回被删除的元素" class="headerlink" title="4.pop – 删除数组的最后一个数组项目,数组的 length 自动-1，会返回被删除的元素"></a>4.pop – 删除数组的最后一个数组项目,数组的 length 自动-1，会返回被删除的元素</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">pop</span>()</span><br><span class="line">arr.<span class="title function_">pop</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure></blockquote><h2 id="四-数组的高级方法"><a href="#四-数组的高级方法" class="headerlink" title="四.数组的高级方法"></a>四.数组的高级方法</h2><h4 id="1-slice-sn-en-通过下标截取数组-返回新数组"><a href="#1-slice-sn-en-通过下标截取数组-返回新数组" class="headerlink" title="1.slice(sn,en) 通过下标截取数组 返回新数组"></a>1.slice(sn,en) 通过下标截取数组 返回新数组</h4><blockquote><p>不改变原数组, 区间左闭右开 , 只有一个参数默认这个下标开始一直到结束</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.<span class="title function_">slice</span>(<span class="number">3</span>, <span class="number">6</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1) <span class="comment">//[4,5,6,7]</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="2-x3D-x3D-splice-index-num-info-–改变数组-–返回新的数组-截取-替换-添加-x3D-x3D"><a href="#2-x3D-x3D-splice-index-num-info-–改变数组-–返回新的数组-截取-替换-添加-x3D-x3D" class="headerlink" title="2.&#x3D;&#x3D;splice(index,num,info) –改变数组 –返回新的数组 截取 替换 添加&#x3D;&#x3D;"></a>2.&#x3D;&#x3D;splice(index,num,info) –改变数组 –返回新的数组 截取 替换 添加&#x3D;&#x3D;</h4><blockquote><p>index - 从数组第几项开始–必选<br>num - 截取的数量<br>info - 从截取的位置开始添加数组项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;我&#x27;</span>, <span class="string">&#x27;爱&#x27;</span>, <span class="string">&#x27;你&#x27;</span>, <span class="string">&#x27;呀&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1) <span class="comment">//[3,4,5]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">//[1,2,&quot;我&quot;,&quot;爱&quot;,&quot;你&quot;,&quot;呀&quot;]</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="3-骚操作"><a href="#3-骚操作" class="headerlink" title="3.骚操作"></a>3.骚操作</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="comment">// push 后增</span></span><br><span class="line"><span class="keyword">let</span> arr1 = arr.<span class="title function_">splice</span>(arr.<span class="property">length</span>, <span class="number">0</span>, <span class="string">&#x27;我&#x27;</span>) <span class="comment">//[1,2,3,4,5,6,7,&quot;我&quot;</span></span><br><span class="line"><span class="comment">// pop 后减</span></span><br><span class="line"><span class="keyword">let</span> arr1 = arr.<span class="title function_">splice</span>(arr.<span class="property">length</span> - <span class="number">1</span>, <span class="number">1</span>) <span class="comment">//[1,2,3,4,5,6]</span></span><br><span class="line"><span class="comment">// unshift 前增</span></span><br><span class="line"><span class="keyword">let</span> arr1 = arr.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;豆沙&#x27;</span>) <span class="comment">//[&quot;豆沙&quot;,1,2,3,4,5,6,7]</span></span><br><span class="line"><span class="comment">//shift 前减</span></span><br><span class="line"><span class="keyword">let</span> arr1 = arr.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">1</span>) <span class="comment">//[2,3,4,5,6,7]</span></span><br><span class="line"><span class="comment">//slice 切割 - 不改变原数组,splice会改变原数组</span></span><br><span class="line"><span class="keyword">let</span> arr1 = arr.<span class="title function_">splice</span>(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1) <span class="comment">//[4,5]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">//[1,2,3,6,7]</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="五-sort-排序"><a href="#五-sort-排序" class="headerlink" title="五.sort 排序"></a>五.sort 排序</h2><h4 id="1-reverse-方法"><a href="#1-reverse-方法" class="headerlink" title="1.reverse()方法"></a>1.reverse()方法</h4><blockquote><h4 id="会反转数组的顺序-直接在原始的数组上排序，只是单纯的调转数字的数组项的整体顺序而已-会改变原始数组"><a href="#会反转数组的顺序-直接在原始的数组上排序，只是单纯的调转数字的数组项的整体顺序而已-会改变原始数组" class="headerlink" title="会反转数组的顺序,直接在原始的数组上排序，只是单纯的调转数字的数组项的整体顺序而已,会改变原始数组"></a>会反转数组的顺序,直接在原始的数组上排序，只是单纯的调转数字的数组项的整体顺序而已,会改变原始数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">values.<span class="title function_">reverse</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(values) <span class="comment">//[5,4,3,2,1]</span></span><br><span class="line"><span class="keyword">let</span> val = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line">val.<span class="title function_">reverse</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(val) <span class="comment">//[4,2,5,3,1]</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="2-sort-的默认功效"><a href="#2-sort-的默认功效" class="headerlink" title="2.sort() 的默认功效"></a>2.sort() 的默认功效</h4><blockquote><h4 id="会按照字符串的先后顺序对数组的每一个数组项目的字符顺序进行排序"><a href="#会按照字符串的先后顺序对数组的每一个数组项目的字符顺序进行排序" class="headerlink" title="会按照字符串的先后顺序对数组的每一个数组项目的字符顺序进行排序"></a>会按照字符串的先后顺序对数组的每一个数组项目的字符顺序进行排序</h4><h4 id="如果数组的某个项目不是字符串-会先把数组项目转换为字符串-再来按照比较字符串的比较方式来排序"><a href="#如果数组的某个项目不是字符串-会先把数组项目转换为字符串-再来按照比较字符串的比较方式来排序" class="headerlink" title="如果数组的某个项目不是字符串,会先把数组项目转换为字符串,再来按照比较字符串的比较方式来排序"></a>如果数组的某个项目不是字符串,会先把数组项目转换为字符串,再来按照比较字符串的比较方式来排序</h4><p>&#x3D;&#x3D;会改变原始数组&#x3D;&#x3D;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line">arr.<span class="title function_">sort</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">//[1,2,3,4,5]</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">10</span>, <span class="number">3</span>, <span class="number">50</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line">arr1.<span class="title function_">sort</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1) <span class="comment">//[10,2,3,4,50]</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="3-sort-传入一个参数-这个参数必须是函数-比较函数-比较函数接收两个参数"><a href="#3-sort-传入一个参数-这个参数必须是函数-比较函数-比较函数接收两个参数" class="headerlink" title="3.sort()传入一个参数,这个参数必须是函数(比较函数),比较函数接收两个参数"></a>3.sort()传入一个参数,这个参数必须是函数(比较函数),比较函数接收两个参数</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">10</span>,<span class="number">3</span>,<span class="number">50</span>,<span class="number">2</span>,<span class="number">4</span>];</span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> a-b <span class="comment">// 从小到大(升序)</span></span><br><span class="line"><span class="keyword">return</span> b-a <span class="comment">// 从大到小(降序)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = [</span><br><span class="line">         &#123;<span class="attr">pro</span>:<span class="string">&quot;猫&quot;</span>,<span class="attr">price</span>:<span class="number">1</span>&#125;,</span><br><span class="line">         &#123;<span class="attr">pro</span>:<span class="string">&quot;狗&quot;</span>,<span class="attr">price</span>:<span class="number">30</span>&#125;,</span><br><span class="line">         &#123;<span class="attr">pro</span>:<span class="string">&quot;兔子&quot;</span>,<span class="attr">price</span>:<span class="number">29</span>&#125;,</span><br><span class="line">         &#123;<span class="attr">pro</span>:<span class="string">&quot;老鼠&quot;</span>,<span class="attr">price</span>:<span class="number">12</span>&#125;</span><br><span class="line">     ];</span><br><span class="line">obj.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a,b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a.<span class="property">price</span>-b.<span class="property">price</span>;<span class="comment">//按价格从小到大排序</span></span><br><span class="line"> &#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( obj )</span><br></pre></td></tr></table></figure></blockquote><h4 id="4-concat-合并两个数组为一个新的数组"><a href="#4-concat-合并两个数组为一个新的数组" class="headerlink" title="4.concat()合并两个数组为一个新的数组"></a>4.concat()合并两个数组为一个新的数组</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> aa = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> bb = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">let</span> ab = aa.<span class="title function_">concat</span>(bb)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ab) <span class="comment">//[1,2,3,7,8,9]</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="5-join-“拼接符号-空-空格都可-”-将数组拼接成字符串"><a href="#5-join-“拼接符号-空-空格都可-”-将数组拼接成字符串" class="headerlink" title="5.join(“拼接符号(空,空格都可)”)将数组拼接成字符串"></a>5.join(“拼接符号(空,空格都可)”)将数组拼接成字符串</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="string">&#x27;gg&#x27;</span>, <span class="string">&#x27;xx&#x27;</span>, <span class="string">&#x27;ss&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;qq&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> b = a.<span class="title function_">join</span>(<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">//[gg+xx+ss+cc+qq]</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;我爱你&#x27;</span></span><br><span class="line"><span class="keyword">let</span> arr = str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">arr.<span class="title function_">reverse</span>()</span><br><span class="line"><span class="keyword">let</span> str1 = arr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1, str) <span class="comment">//你爱我  我爱你</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="6-Array-from-类数组对象-转换成数组"><a href="#6-Array-from-类数组对象-转换成数组" class="headerlink" title="6.Array.from() - 类数组对象 转换成数组"></a>6.Array.from() - 类数组对象 转换成数组</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">//[1,2,3]</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="7-indexOf-查找数组项返回下标-如果没有则返回-1"><a href="#7-indexOf-查找数组项返回下标-如果没有则返回-1" class="headerlink" title="7.indexOf() - 查找数组项返回下标,如果没有则返回-1"></a>7.indexOf() - 查找数组项返回下标,如果没有则返回-1</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ss = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">indexOf</span>(<span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ss) <span class="comment">//1</span></span><br><span class="line"><span class="keyword">let</span> ss = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">indexOf</span>(<span class="number">5</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ss) <span class="comment">//-1</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="8-includes-查看是否包含参数的值-返回布尔值"><a href="#8-includes-查看是否包含参数的值-返回布尔值" class="headerlink" title="8.includes() 查看是否包含参数的值,返回布尔值"></a>8.includes() 查看是否包含参数的值,返回布尔值</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dd = [<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;ccs&#x27;</span>].<span class="title function_">includes</span>(<span class="string">&#x27;ccs&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dd) <span class="comment">//true</span></span><br><span class="line"><span class="keyword">let</span> dd = [<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;ccs&#x27;</span>].<span class="title function_">includes</span>(<span class="string">&#x27;cc&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dd) <span class="comment">//false</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="六-数组的循环-forEach"><a href="#六-数组的循环-forEach" class="headerlink" title="六.数组的循环(forEach)"></a>六.数组的循环(forEach)</h2><blockquote><h5 id="接收的必须是一个函数"><a href="#接收的必须是一个函数" class="headerlink" title="接收的必须是一个函数"></a>接收的必须是一个函数</h5><h5 id="该方法没有返回值"><a href="#该方法没有返回值" class="headerlink" title="该方法没有返回值"></a>该方法没有返回值</h5><h5 id="该方法-可以-修改原数组"><a href="#该方法-可以-修改原数组" class="headerlink" title="该方法 可以 修改原数组"></a>该方法 可以 修改原数组</h5><h5 id="函数传参时-传入一个普通数据类型不会修改原数组"><a href="#函数传参时-传入一个普通数据类型不会修改原数组" class="headerlink" title="函数传参时,传入一个普通数据类型不会修改原数组"></a>函数传参时,传入一个普通数据类型不会修改原数组</h5><h5 id="传入一个引用数据类型时会修改原数组"><a href="#传入一个引用数据类型时会修改原数组" class="headerlink" title="传入一个引用数据类型时会修改原数组"></a>传入一个引用数据类型时会修改原数组</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">value, index, array</span>) &#123;</span><br><span class="line">  <span class="comment">// console.log( value, index, array )</span></span><br><span class="line">  <span class="comment">// array[index] += 10;//(引用数据类型) a10 b10 c10 d10</span></span><br><span class="line">  value += <span class="number">10</span> <span class="comment">//(普通数据类型)[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;]</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ap = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ap)</span><br><span class="line">ap.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">ele, i</span>) &#123;</span><br><span class="line">  ele.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">innerHTML</span>, i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote><h2 id="七-every"><a href="#七-every" class="headerlink" title="七.every();"></a>七.every();</h2><blockquote><h5 id="接收的回调函数-—-三个参数-数组项-数组下标-数组本身-需要用谁就传谁"><a href="#接收的回调函数-—-三个参数-数组项-数组下标-数组本身-需要用谁就传谁" class="headerlink" title="接收的回调函数 — 三个参数 : 数组项 ,数组下标, 数组本身,需要用谁就传谁"></a>接收的回调函数 — 三个参数 : 数组项 ,数组下标, 数组本身,需要用谁就传谁</h5><h5 id="必须对每一项都返回-true-这个方法才返回-true-否则返回-false"><a href="#必须对每一项都返回-true-这个方法才返回-true-否则返回-false" class="headerlink" title="必须对每一项都返回 true,这个方法才返回 true,否则返回 false"></a>必须对每一项都返回 true,这个方法才返回 true,否则返回 false</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">let</span> res = num.<span class="title function_">every</span>(<span class="keyword">function</span> (<span class="params">item, index, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">//false</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="八-some"><a href="#八-some" class="headerlink" title="八.some();"></a>八.some();</h2><blockquote><h5 id="接收的回调函数-—-三个参数-数组项-数组下标-数组本身-需要用谁就传谁-1"><a href="#接收的回调函数-—-三个参数-数组项-数组下标-数组本身-需要用谁就传谁-1" class="headerlink" title="接收的回调函数 — 三个参数 : 数组项 ,数组下标, 数组本身,需要用谁就传谁"></a>接收的回调函数 — 三个参数 : 数组项 ,数组下标, 数组本身,需要用谁就传谁</h5><h5 id="只要传入的函数对数组中的某一项返回-true-就会返回-true"><a href="#只要传入的函数对数组中的某一项返回-true-就会返回-true" class="headerlink" title="只要传入的函数对数组中的某一项返回 true,就会返回 true"></a>只要传入的函数对数组中的某一项返回 true,就会返回 true</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">let</span> res = num.<span class="title function_">some</span>(<span class="keyword">function</span> (<span class="params">item, index, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">5</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">//true</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="九-x3D-x3D-filter-x3D-x3D"><a href="#九-x3D-x3D-filter-x3D-x3D" class="headerlink" title="九.&#x3D;&#x3D;filter();&#x3D;&#x3D;"></a>九.&#x3D;&#x3D;filter();&#x3D;&#x3D;</h2><blockquote><h5 id="接收的回调函数-—-三个参数-数组项-数组下标-数组本身-需要用谁就传谁-2"><a href="#接收的回调函数-—-三个参数-数组项-数组下标-数组本身-需要用谁就传谁-2" class="headerlink" title="接收的回调函数 — 三个参数 : 数组项 ,数组下标, 数组本身,需要用谁就传谁"></a>接收的回调函数 — 三个参数 : 数组项 ,数组下标, 数组本身,需要用谁就传谁</h5><h5 id="利用指定函数中-return-的语句条件，把所有符合条件的数组项目组成一个新的数组返回"><a href="#利用指定函数中-return-的语句条件，把所有符合条件的数组项目组成一个新的数组返回" class="headerlink" title="利用指定函数中 return 的语句条件，把所有符合条件的数组项目组成一个新的数组返回"></a>利用指定函数中 return 的语句条件，把所有符合条件的数组项目组成一个新的数组返回</h5><h5 id="不改变原来的数组"><a href="#不改变原来的数组" class="headerlink" title="不改变原来的数组"></a>不改变原来的数组</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">var</span> res = arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item, i, arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">//[3,4,5,6,4,3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">//[1,2,3,4,5,6,4,3,2,1]</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="十-x3D-x3D-map-x3D-x3D"><a href="#十-x3D-x3D-map-x3D-x3D" class="headerlink" title="十.&#x3D;&#x3D;map();&#x3D;&#x3D;"></a>十.&#x3D;&#x3D;map();&#x3D;&#x3D;</h2><blockquote><h5 id="接收的回调函数-—-三个参数-数组项-数组下标-数组本身-需要用谁就传谁-需配合-return-使用"><a href="#接收的回调函数-—-三个参数-数组项-数组下标-数组本身-需要用谁就传谁-需配合-return-使用" class="headerlink" title="接收的回调函数 — 三个参数 : 数组项 ,数组下标, 数组本身,需要用谁就传谁,需配合 return 使用"></a>接收的回调函数 — 三个参数 : 数组项 ,数组下标, 数组本身,需要用谁就传谁,需配合 return 使用</h5><h5 id="map-如果没有-return-则返回元素项数个数-都为-undefined-组成的新数组"><a href="#map-如果没有-return-则返回元素项数个数-都为-undefined-组成的新数组" class="headerlink" title="map 如果没有 return,则返回元素项数个数,都为 undefined 组成的新数组"></a>map 如果没有 return,则返回元素项数个数,都为 undefined 组成的新数组</h5><h5 id="不改变原数组"><a href="#不改变原数组" class="headerlink" title="不改变原数组"></a>不改变原数组</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> b = a.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> val + <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">//[2,3,4]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">//[1,2,3]</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="十一-归并-reduce"><a href="#十一-归并-reduce" class="headerlink" title="十一.归并 reduce()"></a>十一.归并 reduce()</h2><blockquote><h5 id="迭代数组所有项目-—-构建一个最终返回值"><a href="#迭代数组所有项目-—-构建一个最终返回值" class="headerlink" title="迭代数组所有项目 — 构建一个最终返回值"></a>迭代数组所有项目 — 构建一个最终返回值</h5><h5 id="一个函数-和-可选-作为归并基础的-初始值"><a href="#一个函数-和-可选-作为归并基础的-初始值" class="headerlink" title="一个函数 和 (可选) 作为归并基础的 初始值"></a>一个函数 和 (可选) 作为归并基础的 初始值</h5><h5 id="接受一个回调函数-4-参数-分别是-前一个值-上一次的运算结果-当前值-数组下标-和-数组"><a href="#接受一个回调函数-4-参数-分别是-前一个值-上一次的运算结果-当前值-数组下标-和-数组" class="headerlink" title="接受一个回调函数,4 参数 - 分别是: 前一个值(上一次的运算结果),当前值,数组下标 和 数组"></a>接受一个回调函数,4 参数 - 分别是: 前一个值(上一次的运算结果),当前值,数组下标 和 数组</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> sum = value.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">pre, cur, index, arr</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(pre, cur)</span><br><span class="line">  <span class="keyword">return</span> pre * cur</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum1 = value.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">pre, cur, index, arr</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(pre, cur)</span><br><span class="line">  <span class="keyword">return</span> pre + cur</span><br><span class="line">&#125;, <span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum1)</span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一-字符串相关方法&quot;&gt;&lt;a href=&quot;#一-字符串相关方法&quot; class=&quot;headerlink&quot; title=&quot;一.字符串相关方法&quot;&gt;&lt;/a&gt;一.字符串相关方法&lt;/h2&gt;</summary>
    
    
    
    <category term="JS基础" scheme="http://zicuan123.github.io/categories/JS%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="JavaScript" scheme="http://zicuan123.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>作用域</title>
    <link href="http://zicuan123.github.io/2022/08/23/JS%E8%BF%9B%E9%98%B6/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://zicuan123.github.io/2022/08/23/JS%E8%BF%9B%E9%98%B6/%E4%BD%9C%E7%94%A8%E5%9F%9F/</id>
    <published>2022-08-23T11:04:45.000Z</published>
    <updated>2022-08-23T11:34:22.856Z</updated>
    
    <content type="html"><![CDATA[<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><span id="more"></span><p>作用域（scope）规定了变量能够被访问的“范围”，离开了这个“范围”变量便不能被访问，作用域分为全局作用域和局部作用域。</p><h4 id="1-局部作用域"><a href="#1-局部作用域" class="headerlink" title="1.局部作用域"></a>1.局部作用域</h4><p>局部作用域分为函数作用域和块作用域。</p><h5 id="1-1函数作用域"><a href="#1-1函数作用域" class="headerlink" title="1.1函数作用域"></a>1.1函数作用域</h5><p>在函数内部声明的变量只能在函数内部被访问，外部无法直接访问。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 声明 counter 函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">counter</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="comment">// 函数内部声明的变量</span></span><br><span class="line">    <span class="keyword">const</span> s = x + y</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s) <span class="comment">// 18</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 设用 counter 函数</span></span><br><span class="line">  <span class="title function_">counter</span>(<span class="number">10</span>, <span class="number">8</span>)</span><br><span class="line">  <span class="comment">// 访问变量 s</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s)<span class="comment">// 报错</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>总结：</p><ol><li>函数内部声明的变量，在函数外部无法被访问</li><li>函数的参数也是函数内部的局部变量</li><li>不同函数内部声明的变量无法互相访问</li><li>函数执行完毕后，函数内部的变量实际被清空了</li></ol></blockquote><h5 id="1-2块作用域"><a href="#1-2块作用域" class="headerlink" title="1.2块作用域"></a>1.2块作用域</h5><p>在 JavaScript 中使用 <code>&#123;&#125;</code> 包裹的代码称为代码块，代码块内部声明的变量外部将【有可能】无法被访问。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// age 只能在该代码块中被访问</span></span><br><span class="line">    <span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 正常</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 超出了 age 的作用域</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(age) <span class="comment">// 报错</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">    <span class="comment">// str 只能在该代码块中被访问</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&#x27;hello world!&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// 正常</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 超出了 age 的作用域</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// 报错</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> t = <span class="number">1</span>; t &lt;= <span class="number">6</span>; t++) &#123;</span><br><span class="line">    <span class="comment">// t 只能在该代码块中被访问</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(t); <span class="comment">// 正常</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 超出了 t 的作用域</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(t); <span class="comment">// 报错</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>JavaScript 中除了变量外还有常量，常量与变量本质的区别是【常量必须要有值且不允许被重新赋值】，常量值为对象时其属性和方法允许重新赋值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 必须要有值</span></span><br><span class="line">  <span class="keyword">const</span> version = <span class="string">&#x27;1.0.0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不能重新赋值</span></span><br><span class="line">  <span class="comment">// version = &#x27;1.0.1&#x27;;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 常量值为对象类型</span></span><br><span class="line">  <span class="keyword">const</span> user = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不能重新赋值</span></span><br><span class="line">  user = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 属性和方法允许被修改</span></span><br><span class="line">  user.<span class="property">name</span> = <span class="string">&#x27;小小明&#x27;</span>;</span><br><span class="line">  user.<span class="property">gender</span> = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>总结：</p><ol><li><code>let</code> 声明的变量会产生块作用域，<code>var</code> 不会产生块作用域</li><li><code>const</code> 声明的常量也会产生块作用域</li><li>不同代码块之间的变量无法互相访问</li><li>推荐使用 <code>let</code> 或 <code>const</code></li></ol><p>注：开发中 <code>let</code> 和 <code>const</code> 经常不加区分的使用，如果担心某个值会不小被修改时，则只能使用 <code>const</code> 声明成常量。</p></blockquote><h4 id="2-全局作用域"><a href="#2-全局作用域" class="headerlink" title="2.全局作用域"></a>2.全局作用域</h4><p><code>&lt;script&gt;</code> 标签和 <code>.js</code> 文件的【最外层】就是所谓的全局作用域，在此声明的变量在函数内部也可以被访问。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 此处是全局</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 此处为局部</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 此处为全局</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>全局作用域中声明的变量，任何其它作用域都可以被访问，如下代码所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 全局变量 name</span></span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">&#x27;小明&#x27;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 函数作用域中访问全局</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 此处为局部</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好&#x27;</span> + name)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全局变量 flag 和 x</span></span><br><span class="line">    <span class="keyword">const</span> flag = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">10</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 块作用域中访问全局</span></span><br><span class="line">    <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">      <span class="keyword">let</span> y = <span class="number">5</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y) <span class="comment">// x 是全局的</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>总结：</p><ol><li>为 <code>window</code> 对象动态添加的属性默认也是全局的，不推荐！</li><li>函数中未使用任何关键字声明的变量为全局变量，不推荐！！！</li><li>尽可能少的声明全局变量，防止全局变量被污染</li></ol><p>JavaScript 中的作用域是程序被执行时的底层机制，了解这一机制有助于规范代码书写习惯，避免因作用域导致的语法错误。</p></blockquote><h4 id="3-作用域链"><a href="#3-作用域链" class="headerlink" title="3.作用域链"></a>3.作用域链</h4><p>在解释什么是作用域链前先来看一段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 全局作用域</span></span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line">  <span class="comment">// 局部作用域</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> c</span><br><span class="line">    <span class="comment">// 局部作用域</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">g</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> d = <span class="string">&#x27;yo&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>函数内部允许创建新的函数，<code>f</code> 函数内部创建的新函数 <code>g</code>，会产生新的函数作用域，由此可知作用域产生了嵌套的关系。</p><p>作用域链本质上是底层的变量查找机制，在函数被执行时，会优先查找当前函数作用域中查找变量，如果当前作用域查找不到则会依次逐级查找父级作用域直到全局作用域，如下代码所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 全局作用域</span></span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 局部作用域</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> c</span><br><span class="line">    <span class="comment">// let a = 10;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 1 或 10</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(d) <span class="comment">// 报错</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 局部作用域</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">g</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> d = <span class="string">&#x27;yo&#x27;</span></span><br><span class="line">      <span class="comment">// let b = 20;</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 2 或 20</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用 g 函数</span></span><br><span class="line">    <span class="title function_">g</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// 报错</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(d) <span class="comment">// 报错</span></span><br><span class="line">  </span><br><span class="line">  <span class="title function_">f</span>();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>总结：</p><ol><li>嵌套关系的作用域串联起来形成了作用域链</li><li>相同作用域链中按着从小到大的规则查找变量</li><li>子作用域能够访问父作用域，父级作用域无法访问子级作用域</li></ol></blockquote><h4 id="4-闭包"><a href="#4-闭包" class="headerlink" title="4.闭包"></a>4.闭包</h4><p>闭包是一种比较特殊的函数，使用闭包能够访问函数作用域中的变量。从代码形式上看闭包是一个做为返回值的函数，如下代码所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数内部分函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(++i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将函数做为返回值</span></span><br><span class="line">    <span class="keyword">return</span> bar;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// fn 即为闭包函数</span></span><br><span class="line">  <span class="keyword">let</span> fn = <span class="title function_">foo</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">fn</span>(); <span class="comment">// 1</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>总结：</p><ol><li>闭包本质仍是函数，只不是从函数内部返回的</li><li>闭包能够创建外部可访问的隔离作用域，避免全局变量污染</li><li>过度使用闭包可能造成内存泄漏</li></ol><p>注：回调函数也能访问函数内部的局部变量。</p></blockquote><h4 id="5-变量提升"><a href="#5-变量提升" class="headerlink" title="5.变量提升"></a>5.变量提升</h4><p>变量提升是 JavaScript 中比较“奇怪”的现象，它允许在变量声明之前即被访问，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 访问变量 str</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str + <span class="string">&#x27;world!&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 声明变量 str</span></span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&#x27;hello &#x27;</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>总结：</p><ol><li>变量在未声明即被访问时会报语法错误</li><li>变量在声明之前即被访问，变量的值为 <code>undefined</code></li><li><code>let</code> 声明的变量不存在变量提升，推荐使用 <code>let</code></li><li>变量提升出现在相同作用域当中</li><li>实际开发中推荐先声明再访问变量</li></ol><p>注：关于变量提升的原理分析会涉及较为复杂的词法分析等知识，而开发中使用 <code>let</code> 可以轻松规避变量的提升，因此在此不做过多的探讨，有兴趣可<a href="https://segmentfault.com/a/1190000013915935">查阅资料</a>。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;作用域&quot;&gt;&lt;a href=&quot;#作用域&quot; class=&quot;headerlink&quot; title=&quot;作用域&quot;&gt;&lt;/a&gt;作用域&lt;/h3&gt;</summary>
    
    
    
    <category term="JS进阶" scheme="http://zicuan123.github.io/categories/JS%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="JS进阶" scheme="http://zicuan123.github.io/tags/JS%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>filter筛选数组</title>
    <link href="http://zicuan123.github.io/2022/08/22/JS%E8%BF%9B%E9%98%B6/filter%E7%AD%9B%E9%80%89%E6%95%B0%E7%BB%84/"/>
    <id>http://zicuan123.github.io/2022/08/22/JS%E8%BF%9B%E9%98%B6/filter%E7%AD%9B%E9%80%89%E6%95%B0%E7%BB%84/</id>
    <published>2022-08-22T10:10:19.000Z</published>
    <updated>2022-08-22T10:19:07.833Z</updated>
    
    <content type="html"><![CDATA[<h3 id="filter-方法"><a href="#filter-方法" class="headerlink" title="filter()方法"></a>filter()方法</h3><span id="more"></span><p>filter() 筛选数组 ,创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素</p><h4 id="主要使用场景"><a href="#主要使用场景" class="headerlink" title="主要使用场景"></a>主要使用场景</h4><p>筛选数组&#x3D;&#x3D;符合条件&#x3D;&#x3D;的元素，并返回&#x3D;&#x3D;筛选之后&#x3D;&#x3D;元素的新数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line"><span class="keyword">const</span> newArr = arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;</span><br><span class="line">   <span class="comment">// filter方法里只能写比较运算符，不能写+ - 运算符</span></span><br><span class="line">   <span class="keyword">return</span> item &gt;= <span class="number">20</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);<span class="comment">// [20, 30, 40]</span></span><br></pre></td></tr></table></figure><h4 id="箭头函数写法"><a href="#箭头函数写法" class="headerlink" title="箭头函数写法"></a>箭头函数写法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newArr = arr.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt;= <span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);<span class="comment">// [20, 30, 40]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;filter-方法&quot;&gt;&lt;a href=&quot;#filter-方法&quot; class=&quot;headerlink&quot; title=&quot;filter()方法&quot;&gt;&lt;/a&gt;filter()方法&lt;/h3&gt;</summary>
    
    
    
    <category term="JS进阶" scheme="http://zicuan123.github.io/categories/JS%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="JS进阶" scheme="http://zicuan123.github.io/tags/JS%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>forEach方法</title>
    <link href="http://zicuan123.github.io/2022/08/22/JS%E8%BF%9B%E9%98%B6/forEach%E6%96%B9%E6%B3%95/"/>
    <id>http://zicuan123.github.io/2022/08/22/JS%E8%BF%9B%E9%98%B6/forEach%E6%96%B9%E6%B3%95/</id>
    <published>2022-08-22T10:09:44.000Z</published>
    <updated>2022-08-22T10:15:56.525Z</updated>
    
    <content type="html"><![CDATA[<h3 id="forEach-方法"><a href="#forEach-方法" class="headerlink" title="forEach()方法"></a>forEach()方法</h3><span id="more"></span><p>forEach()用于&#x3D;&#x3D;调用数组的每一个元素&#x3D;&#x3D;，并将元素&#x3D;&#x3D;传递给回调函数&#x3D;&#x3D;</p><p>简单理解 &#x3D;&#x3D;加强版&#x3D;&#x3D;的for循环 更适合遍历&#x3D;&#x3D;数组对象&#x3D;&#x3D;</p><p>不返回数组，因此不需要return 只起到遍历数组的作用</p><h4 id="主要使用场景"><a href="#主要使用场景" class="headerlink" title="主要使用场景"></a>主要使用场景</h4><p>遍历数组的每个元素</p><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;red&#x27;</span>]</span><br><span class="line"><span class="comment">//item: 当前数组元素 必写   index：当前数组元素的索引号</span></span><br><span class="line"><span class="keyword">const</span> result = arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item, index);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 返回数组只会得到undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><h4 id="箭头函数写法"><a href="#箭头函数写法" class="headerlink" title="箭头函数写法"></a>箭头函数写法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(item))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;forEach-方法&quot;&gt;&lt;a href=&quot;#forEach-方法&quot; class=&quot;headerlink&quot; title=&quot;forEach()方法&quot;&gt;&lt;/a&gt;forEach()方法&lt;/h3&gt;</summary>
    
    
    
    <category term="JS进阶" scheme="http://zicuan123.github.io/categories/JS%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="JS进阶" scheme="http://zicuan123.github.io/tags/JS%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>解构赋值</title>
    <link href="http://zicuan123.github.io/2022/08/22/JS%E8%BF%9B%E9%98%B6/%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
    <id>http://zicuan123.github.io/2022/08/22/JS%E8%BF%9B%E9%98%B6/%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</id>
    <published>2022-08-22T09:11:39.000Z</published>
    <updated>2022-08-22T10:10:42.254Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h3><span id="more"></span><h4 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h4><p>数组解构是将数组的单元值 &#x3D;&#x3D;快速批量&#x3D;&#x3D; 赋值给&#x3D;&#x3D;一系列变量&#x3D;&#x3D;的 简洁语法</p><h4 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h4><p>1.赋值运算符 &#x3D; 左侧的[]用于批量声明变量，右侧数组的单元值将被赋值给左侧的变量</p><p> 2.变量的顺序对应数组单元值的位置依次进行赋值操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">// const [a, b, c] = arr</span></span><br><span class="line"><span class="keyword">const</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><h4 id="典型应用：交换两个变量的值"><a href="#典型应用：交换两个变量的值" class="headerlink" title="典型应用：交换两个变量的值"></a>典型应用：交换两个变量的值</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"> <span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line"> ;[b, a] = [a, b]<span class="comment">//注意此处开头必须加一个分号</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);<span class="comment">//2 1</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="高级语法"><a href="#高级语法" class="headerlink" title="高级语法"></a>高级语法</h4><h6 id="1-变量的数量大于单元值的数量时，多余的变量将被赋值为-undefined"><a href="#1-变量的数量大于单元值的数量时，多余的变量将被赋值为-undefined" class="headerlink" title="1.变量的数量大于单元值的数量时，多余的变量将被赋值为 undefined"></a>1.变量的数量大于单元值的数量时，多余的变量将被赋值为 undefined</h6><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, c, d] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c, d);<span class="comment">//1 2 3 undefined</span></span><br></pre></td></tr></table></figure></blockquote><h6 id="2-变量的数量小于单元值的数量时，多余的单元值就不会再赋值了"><a href="#2-变量的数量小于单元值的数量时，多余的单元值就不会再赋值了" class="headerlink" title="2.变量的数量小于单元值的数量时，多余的单元值就不会再赋值了"></a>2.变量的数量小于单元值的数量时，多余的单元值就不会再赋值了</h6><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c);<span class="comment">//1 2 3</span></span><br></pre></td></tr></table></figure></blockquote><h6 id="3-利用剩余参数解决变量的数量小于单元值的数量"><a href="#3-利用剩余参数解决变量的数量小于单元值的数量" class="headerlink" title="3.利用剩余参数解决变量的数量小于单元值的数量"></a>3.利用剩余参数解决变量的数量小于单元值的数量</h6><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, c, ...arr] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c, arr);<span class="comment">//1 2 3 [4,5]</span></span><br></pre></td></tr></table></figure></blockquote><h6 id="4-防止undefined传递-给变量一个默认值"><a href="#4-防止undefined传递-给变量一个默认值" class="headerlink" title="4.防止undefined传递 给变量一个默认值"></a>4.防止undefined传递 给变量一个默认值</h6><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a = <span class="number">0</span>, b = <span class="number">0</span>, c = <span class="number">0</span>] = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c);<span class="comment">//1 2 0</span></span><br></pre></td></tr></table></figure></blockquote><h6 id="5-按需导入赋值"><a href="#5-按需导入赋值" class="headerlink" title="5.按需导入赋值"></a>5.按需导入赋值</h6><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, , d] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, d);<span class="comment">//1 2 4</span></span><br></pre></td></tr></table></figure></blockquote><h6 id="6-多维数组解构"><a href="#6-多维数组解构" class="headerlink" title="6.多维数组解构"></a>6.多维数组解构</h6><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]</span><br><span class="line"><span class="keyword">const</span> [a, b, c, [d, e]] = arr</span><br></pre></td></tr></table></figure></blockquote><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><h4 id="含义-1"><a href="#含义-1" class="headerlink" title="含义"></a>含义</h4><p>对象解构是将对象属性和方法 &#x3D;&#x3D;快速批量&#x3D;&#x3D; 赋值给&#x3D;&#x3D;一系列变量的&#x3D;&#x3D; 简洁语法</p><h4 id="基本语法：-1"><a href="#基本语法：-1" class="headerlink" title="基本语法："></a>基本语法：</h4><ol><li><p>赋值运算符 &#x3D; 左侧的{} 用于批量声明变量，右侧对象的属性值将被赋值给左侧的变量</p></li><li><p>对象属性的值将被赋值给与属性名相同的变量*</p></li><li><p>注意解构的变量名不要和外面的变量名冲突否则会报错</p></li><li><p>对象中找不到与变量名一致的属性时变量值为undefined</p></li><li><p>对象解构的变量名 可以重新改名  旧变量名：新变量名</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">uname</span>: <span class="string">&#x27;梓川&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123; uname, age &#125; = obj</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uname, age);<span class="comment">//梓川 18 </span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">uname</span>: usname, age &#125; = obj</span><br></pre></td></tr></table></figure><h4 id="高级语法-1"><a href="#高级语法-1" class="headerlink" title="高级语法"></a>高级语法</h4><h6 id="1-对象数组解构"><a href="#1-对象数组解构" class="headerlink" title="1.对象数组解构"></a>1.对象数组解构</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pig = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;佩奇&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">5</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> [&#123; uname, age &#125;] = pig</span><br></pre></td></tr></table></figure><h6 id="2-多级对象解构"><a href="#2-多级对象解构" class="headerlink" title="2.多级对象解构"></a>2.多级对象解构</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pig = &#123;</span><br><span class="line">  <span class="attr">uname</span>: <span class="string">&#x27;佩奇&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">family</span>: &#123;</span><br><span class="line">    <span class="attr">mother</span>: <span class="string">&#x27;猪妈妈&#x27;</span>,</span><br><span class="line">    <span class="attr">father</span>: <span class="string">&#x27;猪爸爸&#x27;</span>,</span><br><span class="line">    <span class="attr">brother</span>: <span class="string">&#x27;乔治&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123; uname, age, <span class="attr">family</span>: &#123; mother, father, brother &#125; &#125; = pig</span><br></pre></td></tr></table></figure><h6 id="3-多级对象数组解构"><a href="#3-多级对象数组解构" class="headerlink" title="3.多级对象数组解构"></a>3.多级对象数组解构</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = [</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="attr">uname</span>: <span class="string">&#x27;佩奇&#x27;</span>,</span><br><span class="line">   <span class="attr">age</span>: <span class="number">5</span>,</span><br><span class="line">   <span class="attr">family</span>: &#123;</span><br><span class="line">     <span class="attr">mother</span>: <span class="string">&#x27;猪妈妈&#x27;</span>,</span><br><span class="line">     <span class="attr">father</span>: <span class="string">&#x27;猪爸爸&#x27;</span>,</span><br><span class="line">     <span class="attr">brother</span>: <span class="string">&#x27;乔治&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> [&#123; uname, age, <span class="attr">family</span>: &#123; mother, father, brother &#125; &#125;] = person</span><br></pre></td></tr></table></figure><h3 id="拓展：js必须要加分号的两种情况"><a href="#拓展：js必须要加分号的两种情况" class="headerlink" title="拓展：js必须要加分号的两种情况"></a>拓展：js必须要加分号的两种情况</h3><h5 id="1-立即执行函数必须要加"><a href="#1-立即执行函数必须要加" class="headerlink" title="1.立即执行函数必须要加"></a>1.立即执行函数必须要加</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;)();</span><br></pre></td></tr></table></figure><h5 id="2-以数组开头，并且前面还有一行代码的时候"><a href="#2-以数组开头，并且前面还有一行代码的时候" class="headerlink" title="2.以数组开头，并且前面还有一行代码的时候"></a>2.以数组开头，并且前面还有一行代码的时候</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;pink&#x27;</span></span><br><span class="line">  ;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;<span class="comment">//分号一般加在这里</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;数组解构&quot;&gt;&lt;a href=&quot;#数组解构&quot; class=&quot;headerlink&quot; title=&quot;数组解构&quot;&gt;&lt;/a&gt;数组解构&lt;/h3&gt;</summary>
    
    
    
    <category term="JS进阶" scheme="http://zicuan123.github.io/categories/JS%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="JS进阶" scheme="http://zicuan123.github.io/tags/JS%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>箭头函数</title>
    <link href="http://zicuan123.github.io/2022/08/22/JS%E8%BF%9B%E9%98%B6/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
    <id>http://zicuan123.github.io/2022/08/22/JS%E8%BF%9B%E9%98%B6/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</id>
    <published>2022-08-22T06:14:57.000Z</published>
    <updated>2022-08-22T06:34:50.590Z</updated>
    
    <content type="html"><![CDATA[<h3 id="箭头函数的基本语法"><a href="#箭头函数的基本语法" class="headerlink" title="箭头函数的基本语法"></a>箭头函数的基本语法</h3><span id="more"></span><h6 id="箭头函数-用于替代函数表达式-属于表达式函数，因此不存在函数提升"><a href="#箭头函数-用于替代函数表达式-属于表达式函数，因此不存在函数提升" class="headerlink" title="箭头函数 用于替代函数表达式 属于表达式函数，因此不存在函数提升"></a>箭头函数 用于替代函数表达式 属于表达式函数，因此不存在函数提升</h6><blockquote><p>原函数表达式语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>箭头函数基本语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>箭头函数传参</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">x</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">123</span>)</span><br></pre></td></tr></table></figure></blockquote><blockquote><ol><li>只有一个形参时，小括号可以省略</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = x =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">123</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>只有一行代码时，可以省略大括号 默认直接将代码的值return出去</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = x =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">123</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>只有一行代码时，可以省略return</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = x =&gt; x + x</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><ol start="4"><li>箭头函数可以直接返回一个对象 注意为了区分函数的大括号和对象的大括号，对象要用小括号包裹起来</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = uname =&gt; (&#123; <span class="attr">uname</span>: uname &#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="string">&#x27;亚索&#x27;</span>));<span class="comment">//&#123;uname:亚索&#125;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="箭头函数的参数"><a href="#箭头函数的参数" class="headerlink" title="箭头函数的参数"></a>箭头函数的参数</h3><h6 id="箭头函数中没有动态参数，只有剩余参数"><a href="#箭头函数中没有动态参数，只有剩余参数" class="headerlink" title="箭头函数中没有动态参数，只有剩余参数"></a>箭头函数中没有动态参数，只有剩余参数</h6><blockquote><p>使用箭头函数来求和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getSum</span> = (<span class="params">...arr</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">     sum += arr[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> reSult = <span class="title function_">getSum</span>(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reSult);</span><br></pre></td></tr></table></figure></blockquote><h3 id="箭头函数的this指向"><a href="#箭头函数的this指向" class="headerlink" title="箭头函数的this指向"></a>箭头函数的this指向</h3><blockquote><p>一般js的this指向：谁调用this，this就指向谁</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//指向window</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//指向window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象方法里的this</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;梓川&#x27;</span>,</span><br><span class="line">  <span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//指向obj</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>箭头函数的this指向</p><p>&#x3D;&#x3D;箭头函数不会创建自己的this，它只会从自己的作用域链的上一层沿用this&#x3D;&#x3D;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn1</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//指向window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象里的方法箭头函数的this指向</span></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">   <span class="attr">sayHi</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">// 指向window</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj1.<span class="title function_">sayHi</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="string">&#x27;梓川&#x27;</span>,</span><br><span class="line"> <span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//指向obj2</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">count</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//指向obj2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">count</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj2.<span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure><p>在开发中使用箭头函数前需要考虑this的值，事件回调函数使用箭头函数时，this为全局的window，因此DOM事件回调函数为了简便，还是不太推荐使用箭头函数</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;箭头函数的基本语法&quot;&gt;&lt;a href=&quot;#箭头函数的基本语法&quot; class=&quot;headerlink&quot; title=&quot;箭头函数的基本语法&quot;&gt;&lt;/a&gt;箭头函数的基本语法&lt;/h3&gt;</summary>
    
    
    
    <category term="JS进阶" scheme="http://zicuan123.github.io/categories/JS%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="JS进阶" scheme="http://zicuan123.github.io/tags/JS%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>函数参数</title>
    <link href="http://zicuan123.github.io/2022/08/22/JS%E8%BF%9B%E9%98%B6/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0/"/>
    <id>http://zicuan123.github.io/2022/08/22/JS%E8%BF%9B%E9%98%B6/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0/</id>
    <published>2022-08-22T05:57:23.000Z</published>
    <updated>2022-08-22T06:13:52.496Z</updated>
    
    <content type="html"><![CDATA[<h3 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h3><span id="more"></span><h6 id="arguments-是函数内部内置的伪数组变量，它包含了函数调用时传入的所有实参"><a href="#arguments-是函数内部内置的伪数组变量，它包含了函数调用时传入的所有实参" class="headerlink" title="arguments 是函数内部内置的伪数组变量，它包含了函数调用时传入的所有实参"></a>arguments 是函数内部内置的伪数组变量，它包含了函数调用时传入的所有实参</h6><blockquote><ol><li>动态参数，只存在于函数里 是伪数组</li><li>arguments的作用是动态获取函数传递过来的所有实参</li><li>可以通过for循环一次性得到传递过来的实参</li></ol></blockquote><p>用arguments 实现动态参数求和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      sum += <span class="variable language_">arguments</span>[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>)<span class="comment">//15</span></span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)<span class="comment">//21</span></span><br></pre></td></tr></table></figure><h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><h6 id="剩余参数允许我们将一个不定数量的参数表示为一个真数组"><a href="#剩余参数允许我们将一个不定数量的参数表示为一个真数组" class="headerlink" title="剩余参数允许我们将一个不定数量的参数表示为一个真数组"></a>剩余参数允许我们将一个不定数量的参数表示为一个真数组</h6><p>使用场景：动态获取&#x3D;&#x3D;多余&#x3D;&#x3D;的实参</p><blockquote><ol><li>… 是语法符号，置于最末函数形参之前，用于获取多余的实参</li><li>借助 &#x3D;&#x3D;…&#x3D;&#x3D; 获取的剩余实参，是一个&#x3D;&#x3D;真数组&#x3D;&#x3D;</li><li>开发中提倡使用剩余参数，而非动态参数</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">a, b, ...arr</span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//使用时不需要加 ...</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">7</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">3</span>)</span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br></pre></td></tr></table></figure><h3 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h3><h6 id="展开运算符-…-将一个数组进行展开"><a href="#展开运算符-…-将一个数组进行展开" class="headerlink" title="展开运算符(…), 将一个数组进行展开"></a>展开运算符(…), 将一个数组进行展开</h6><p>典型运用场景，求数组最大最小值，合并数组等</p><p>&#x3D;&#x3D;展开运算符并不会改变原数组&#x3D;&#x3D;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...arr1);<span class="comment">//1 2 3 4</span></span><br></pre></td></tr></table></figure><p>利用展开运算符求数组最大值最小值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(...arr1));<span class="comment">//4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(...arr1));<span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>合并数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">const</span> arr = [...arr1, ...arr2]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//[1, 2, 3, 4, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h6 id="展开运算符与剩余参数的区别"><a href="#展开运算符与剩余参数的区别" class="headerlink" title="展开运算符与剩余参数的区别"></a>展开运算符与剩余参数的区别</h6><p>展开运算符主要是用于 展开数组</p><p>剩余参数 在函数内部使用，接收多余的实参</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;动态参数&quot;&gt;&lt;a href=&quot;#动态参数&quot; class=&quot;headerlink&quot; title=&quot;动态参数&quot;&gt;&lt;/a&gt;动态参数&lt;/h3&gt;</summary>
    
    
    
    <category term="JS进阶" scheme="http://zicuan123.github.io/categories/JS%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="JS进阶" scheme="http://zicuan123.github.io/tags/JS%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>判断控制流程</title>
    <link href="http://zicuan123.github.io/2022/08/21/JS%E5%9F%BA%E7%A1%80/%E5%88%A4%E6%96%AD%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B/"/>
    <id>http://zicuan123.github.io/2022/08/21/JS%E5%9F%BA%E7%A1%80/%E5%88%A4%E6%96%AD%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B/</id>
    <published>2022-08-21T09:53:06.000Z</published>
    <updated>2022-08-21T09:59:01.933Z</updated>
    
    <content type="html"><![CDATA[<h1 id="判断控制流程"><a href="#判断控制流程" class="headerlink" title="判断控制流程"></a>判断控制流程</h1><span id="more"></span><h2 id="一-分支流程控制-if-语句"><a href="#一-分支流程控制-if-语句" class="headerlink" title="一.分支流程控制 if 语句"></a>一.分支流程控制 if 语句</h2><blockquote><p>语句可以理解为一个行为，循环语句和分支语句就是典型的语句。一个程序由很多个语句组成，一般情况下，会分割成一个一个的语句。</p></blockquote><h3 id="1-if-语句语法结构"><a href="#1-if-语句语法结构" class="headerlink" title="1.if 语句语法结构"></a>1.if 语句语法结构</h3><blockquote><p>&#x2F;&#x2F; 条件成立执行代码，否则什么也不做</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">  <span class="comment">// 条件成立执行的代码语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="2-if-else-语句（双分支语句）语法结构"><a href="#2-if-else-语句（双分支语句）语法结构" class="headerlink" title="2.if else 语句（双分支语句）语法结构"></a>2.if else 语句（双分支语句）语法结构</h3><blockquote><p>&#x2F;&#x2F; 条件成立 执行 if 里面代码，否则执行 else 里面的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">  <span class="comment">// [如果] 条件成立执行的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// [否则] 执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="3-if-else-if-语句-多分支语句-语法结构"><a href="#3-if-else-if-语句-多分支语句-语法结构" class="headerlink" title="3.if else if 语句(多分支语句)语法结构"></a>3.if else if 语句(多分支语句)语法结构</h3><blockquote><p>&#x2F;&#x2F; 适合于检查多重条件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式<span class="number">1</span>) &#123;</span><br><span class="line">语句<span class="number">1</span>；</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">2</span>) &#123;</span><br><span class="line">语句<span class="number">2</span>；</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">3</span>) &#123;</span><br><span class="line">语句<span class="number">3</span>；</span><br><span class="line">....</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 上述条件都不成立执行此处代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="二-分支流程控制-switch-语句"><a href="#二-分支流程控制-switch-语句" class="headerlink" title="二.分支流程控制 switch 语句"></a>二.分支流程控制 switch 语句</h2><blockquote><p>switch 语句也是多分支语句，它用于基于不同的条件来执行不同的代码。当要针对变量设置一系列的特定值的选项时，就可以使用 switch。</p></blockquote><blockquote><p>语法结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="attr">value1</span>:</span><br><span class="line">    <span class="comment">// 表达式 等于 value1 时要执行的代码</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="attr">value2</span>:</span><br><span class="line">    <span class="comment">// 表达式 等于 value2 时要执行的代码</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">  <span class="comment">// 表达式 不等于任何一个 value 时要执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="三-三目-元-表达式"><a href="#三-三目-元-表达式" class="headerlink" title="三.三目(元)表达式"></a>三.三目(元)表达式</h2><blockquote><p>三元表达式也能做一些简单的条件选择。 有三元运算符组成的式子称为三元</p></blockquote><blockquote><p>语法结构<br>表达式 1 ? 表达式 2 : 表达式 3;</p></blockquote><blockquote><p>执行思路<br>如果表达式 1 为 true ，则返回表达式 2 的值，如果表达式 1 为 false，则返回表达式 3 的值<br>简单理解： 就类似于 if else （双分支） 的简写</p></blockquote><h2 id="四-循环"><a href="#四-循环" class="headerlink" title="四.循环"></a>四.循环</h2><blockquote><p>目的:在实际问题中，有许多具有规律性的重复操作，因此在程序中要完成这类操作就需要重复执行某些语句</p></blockquote><blockquote><p>迭代:每一次对过程的重复称为迭代.每一次迭代的结果作为下一次迭代的初始值</p></blockquote><p>在 Js 中，主要有三种类型的循环语句：</p><h3 id="1-for-循环"><a href="#1-for-循环" class="headerlink" title="1.for 循环"></a>1.for 循环</h3><blockquote><p>在程序中，一组被重复执行的语句被称之为循环体，能否继续重复执行，取决于循环的终止条件。由循环体及循环的终止条件组成的语句，被称之为循环语句</p></blockquote><blockquote><h4 id="for-循环主要用于把某些代码循环若干次，通常跟计数有关系。其语法结构如下："><a href="#for-循环主要用于把某些代码循环若干次，通常跟计数有关系。其语法结构如下：" class="headerlink" title="for 循环主要用于把某些代码循环若干次，通常跟计数有关系。其语法结构如下："></a>for 循环主要用于把某些代码循环若干次，通常跟计数有关系。其语法结构如下：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化变量; 条件表达式; 操作表达式) &#123;</span><br><span class="line">  <span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化变量：通常被用于初始化一个计数器，该表达式可以使用 var 关键字声明新的变量，这个变量帮我们来记录次数。<br>条件表达式：用于确定每一次循环是否能被执行。如果结果是 true 就继续循环，否则退出循环。<br>操作表达式：每次循环的最后都要执行的表达式。通常被用于更新或者递增计数器变量。当然，递减变量也是可以的。</p></blockquote><blockquote><h4 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h4><p>1.初始化变量，初始化操作在整个 for 循环只会执行一次。</p><p>2.执行条件表达式，如果为 true，则执行循环体语句，否则退出循环，循环结束。</p><p>3.执行操作表达式，此时第一轮结束。</p><p>4.第二轮开始，直接去执行条件表达式（不再初始化变量），如果为 true ，则去执行循环体语句，否则退出循环。</p><p>5.继续执行操作表达式，第二轮结束。</p><p>6.后续跟第二轮一致，直至条件表达式为假，结束整个 for 循环</p></blockquote><h3 id="2-双重-for-循环"><a href="#2-双重-for-循环" class="headerlink" title="2.双重 for 循环"></a>2.双重 for 循环</h3><blockquote><p>循环嵌套是指在一个循环语句中再定义一个循环语句的语法结构，例如在 for 循环语句中，可以再嵌套一个 for 循环，这样的 for 循环语句我们称之为双重 for 循环</p></blockquote><blockquote><h4 id="双重-for-循环语法"><a href="#双重-for-循环语法" class="headerlink" title="双重 for 循环语法"></a>双重 for 循环语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (外循环的初始; 外循环的条件; 外循环的操作表达式) &#123;</span><br><span class="line">  <span class="keyword">for</span> (内循环的初始; 内循环的条件; 内循环的操作表达式) &#123;</span><br><span class="line">    需执行的代码</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>内层循环可以看做外层循环的语句<br>内层循环执行的顺序也要遵循 for 循环的执行顺序<br>外层循环执行一次，内层循环要执行全部次数</p></blockquote><h3 id="3-while-循环"><a href="#3-while-循环" class="headerlink" title="3.while 循环"></a>3.while 循环</h3><blockquote><p>while 语句可以在条件表达式为真的前提下，循环执行指定的一段代码，直到表达式不为真时结束循环。</p></blockquote><blockquote><h4 id="语法结构"><a href="#语法结构" class="headerlink" title="语法结构:"></a>语法结构:</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">  <span class="comment">// 循环体代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><h4 id="执行思路："><a href="#执行思路：" class="headerlink" title="执行思路："></a>执行思路：</h4><p>1.先执行条件表达式，如果结果为 true，则执行循环体代码；如果为 false，则退出循环，执行后面代码</p><p>2.执行循环体代码</p><p>3.循环体代码执行完毕后，程序会继续判断执行条件表达式，如条件仍为 true，则会继续执行循环体，直到循环条件为 false 时，整个循环过程才会结束</p></blockquote><blockquote><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>使用 while 循环时一定要注意，它必须要有退出条件，否则会成为死循环<br>while 循环和 for 循环的不同之处在于 while 循环可以做较为复杂的条件判断，比如判断用户名和密码</p></blockquote><h3 id="4-do…while-循环"><a href="#4-do…while-循环" class="headerlink" title="4.do…while 循环"></a>4.do…while 循环</h3><blockquote><p>do… while 语句其实是 while 语句的一个变体。该循环会先执行一次代码块，然后对条件表达式进行判断，如果条件为真，就会重复执行循环体，否则退出循环。</p></blockquote><blockquote><h4 id="语法结构-1"><a href="#语法结构-1" class="headerlink" title="语法结构:"></a>语法结构:</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="comment">// 循环体代码 - 条件表达式为 true 时重复执行循环体代码</span></span><br><span class="line">&#125; <span class="keyword">while</span> (条件表达式)</span><br></pre></td></tr></table></figure></blockquote><blockquote><h4 id="执行思路：-1"><a href="#执行思路：-1" class="headerlink" title="执行思路："></a>执行思路：</h4><p>1.先执行一次循环体代码 2. 再执行条件表达式，如果结果为 true，则继续执行循环体代码，如果为 false，则退出循环，继续执行后面代码</p></blockquote><blockquote><h4 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h4><p>先执行循环体，再判断，我们会发现 do…while 循环语句至少会执行一次循环体代码</p></blockquote><h3 id="5-break-关键字"><a href="#5-break-关键字" class="headerlink" title="5.break 关键字"></a>5.break 关键字</h3><blockquote><p>break 关键字用于立即跳出整个循环（循环结束）。<br>例如，吃 5 个包子，吃到第 3 个发现里面有半个虫子，其余的不吃了，其代码实现如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span> <span class="comment">// 直接退出整个for 循环，跳到整个for下面的语句</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我正在吃第&#x27;</span> + i + <span class="string">&#x27;个包子呢&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="6-continue-关键字"><a href="#6-continue-关键字" class="headerlink" title="6.continue 关键字"></a>6.continue 关键字</h3><blockquote><p>continue 关键字用于立即跳出本次循环，继续下一次循环（本次循环体中 continue 之后的代码就会少执行一次）。<br>例如，吃 5 个包子，第 3 个有虫子，就扔掉第 3 个，继续吃第 4 个第 5 个包子，其代码实现如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这个包子有虫子，扔掉&#x27;</span>)</span><br><span class="line">    <span class="keyword">continue</span> <span class="comment">// 跳出本次循环，跳出的是第3次循环</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我正在吃第&#x27;</span> + i + <span class="string">&#x27;个包子呢&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;判断控制流程&quot;&gt;&lt;a href=&quot;#判断控制流程&quot; class=&quot;headerlink&quot; title=&quot;判断控制流程&quot;&gt;&lt;/a&gt;判断控制流程&lt;/h1&gt;</summary>
    
    
    
    <category term="JS基础" scheme="http://zicuan123.github.io/categories/JS%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="JavaScript" scheme="http://zicuan123.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>终端中命令</title>
    <link href="http://zicuan123.github.io/2022/08/20/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4/"/>
    <id>http://zicuan123.github.io/2022/08/20/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4/</id>
    <published>2022-08-20T13:21:42.000Z</published>
    <updated>2022-08-20T13:24:45.550Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-终端中的快捷键"><a href="#1-终端中的快捷键" class="headerlink" title="1.终端中的快捷键"></a>1.终端中的快捷键</h3><span id="more"></span><h5 id="在-Windows-的-powershell-或-cmd-终端中，我们可以通过如下快捷键，来提高终端的操作效率："><a href="#在-Windows-的-powershell-或-cmd-终端中，我们可以通过如下快捷键，来提高终端的操作效率：" class="headerlink" title="在 Windows 的 powershell 或 cmd 终端中，我们可以通过如下快捷键，来提高终端的操作效率："></a>在 Windows 的 powershell 或 cmd 终端中，我们可以通过如下快捷键，来提高终端的操作效率：</h5><p>① 使用 ↑ 键，可以快速定位到上一次执行的命令</p><p>② 使用 tab 键，能够快速补全路径</p><p>③ 使用 esc 键，能够快速清空当前已输入的命令</p><p>④ 输入 cls 命令，可以清空终端</p><h3 id="2-webpack-命令"><a href="#2-webpack-命令" class="headerlink" title="2.webpack 命令"></a>2.webpack 命令</h3><p>1.npm init –y：初始化包管理配置文件 package.json</p><p>2.npm install jquery –S：安装 jQuery</p><p>-S 是 –save 的简写，在开发和部署上线都会用到的安装到-S</p><p>3.在终端运行如下的命令，安装 webpack 相关的两个包：</p><p>npm install <a href="mailto:&#119;&#101;&#x62;&#x70;&#x61;&#x63;&#x6b;&#64;&#53;&#x2e;&#52;&#50;&#x2e;&#49;">&#119;&#101;&#x62;&#x70;&#x61;&#x63;&#x6b;&#64;&#53;&#x2e;&#52;&#50;&#x2e;&#49;</a> <a href="mailto:&#x77;&#x65;&#x62;&#112;&#97;&#99;&#x6b;&#45;&#x63;&#108;&#x69;&#x40;&#52;&#x2e;&#x37;&#46;&#x32;">&#x77;&#x65;&#x62;&#112;&#97;&#99;&#x6b;&#45;&#x63;&#108;&#x69;&#x40;&#52;&#x2e;&#x37;&#46;&#x32;</a> -D</p><p>-D 是–save-dev 的简写，只在开发阶段用到的安装到-D</p><p>去 npmjs.com 网站查看规范手册</p><p>4.script 节点下的脚本，用 npm run ‘’脚本名‘’ 命令，执行</p><p>5.安装 webpack-dev-server：npm install <a href="mailto:&#119;&#x65;&#x62;&#112;&#97;&#99;&#107;&#x2d;&#100;&#x65;&#x76;&#x2d;&#115;&#101;&#114;&#118;&#x65;&#x72;&#x40;&#x33;&#x2e;&#x31;&#49;&#46;&#x32;">&#119;&#x65;&#x62;&#112;&#97;&#99;&#107;&#x2d;&#100;&#x65;&#x76;&#x2d;&#115;&#101;&#114;&#118;&#x65;&#x72;&#x40;&#x33;&#x2e;&#x31;&#49;&#46;&#x32;</a> -D</p><p>webpack-dev-server 可以让 webpack 监听项目源代码的变化，从而进行自动打包构建。</p><p>再次运行 npm run dev 命令，重新进行项目的打包</p><p>在浏览器中访问 <a href="http://localhost:8080/">http://localhost:8080</a> 地址，查看自动打包效果</p><p>ctrl c 两次，停止终端运行</p><p>6.html-webpack-plugin 是 webpack 中的 HTML 插件，可以通过此插件自定制 index.html 页面的内容。</p><p>运行如下的命令，即可在项目中安装此插件：</p><p>npm install <a href="mailto:&#104;&#x74;&#109;&#108;&#x2d;&#119;&#101;&#98;&#112;&#x61;&#99;&#107;&#45;&#x70;&#x6c;&#x75;&#x67;&#105;&#x6e;&#64;&#x35;&#46;&#x33;&#x2e;&#x32;">&#104;&#x74;&#109;&#108;&#x2d;&#119;&#101;&#98;&#112;&#x61;&#99;&#107;&#45;&#x70;&#x6c;&#x75;&#x67;&#105;&#x6e;&#64;&#x35;&#46;&#x33;&#x2e;&#x32;</a> -D</p><h3 id="3-vue-cli"><a href="#3-vue-cli" class="headerlink" title="3.vue-cli"></a>3.vue-cli</h3><p>vue-cli 是 Vue.js 开发的标准工具。它简化了程序员基于 webpack 创建工程化的 Vue 项目的过程。</p><p>vue-cli 是 npm 上的一个全局包，使用 npm install 命令，即可方便的把它安装到自己的电脑上:</p><p>npm install -g @vue&#x2F;cli</p><p>基于 vue-cli 快速生成工程化的 Vue 项目：</p><p>vue create 项目的名称</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1-终端中的快捷键&quot;&gt;&lt;a href=&quot;#1-终端中的快捷键&quot; class=&quot;headerlink&quot; title=&quot;1.终端中的快捷键&quot;&gt;&lt;/a&gt;1.终端中的快捷键&lt;/h3&gt;</summary>
    
    
    
    <category term="终端命令" scheme="http://zicuan123.github.io/categories/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="终端命令" scheme="http://zicuan123.github.io/tags/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>git命令</title>
    <link href="http://zicuan123.github.io/2022/08/20/git%E5%91%BD%E4%BB%A4/"/>
    <id>http://zicuan123.github.io/2022/08/20/git%E5%91%BD%E4%BB%A4/</id>
    <published>2022-08-20T13:06:05.000Z</published>
    <updated>2022-08-20T13:22:04.477Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-命令"><a href="#Git-命令" class="headerlink" title="Git 命令"></a>Git 命令</h1><span id="more"></span><ol><li>git config –global user.name “” ：设置用户名，用户名为字符串</li><li>git config –global user.email””:设置邮箱</li><li>git config –list –global：查看所有的全局配置项</li><li>查看指定的全局配置项：</li><li>git config user.name：查看用户名</li><li>git config user.email:查看邮箱</li><li>可以使用 git help &lt;&gt;命令，无需联网即可在浏览器中打开帮助手册，如 git help config</li><li>git config -h 可直接在终端查看 config 手册</li><li>clear 命令可快速清空终端</li></ol><h2 id="二-在现有的目录中初始化仓库"><a href="#二-在现有的目录中初始化仓库" class="headerlink" title="二.在现有的目录中初始化仓库"></a>二.在现有的目录中初始化仓库</h2><p>1.在项目目录中，通过鼠标右键打开“git bash”</p><p>2.执行 git init 命令将当前的目录转化为 git 仓库</p><p>git 命令会创建一个名为.git 的隐藏文件夹，这个.git 目录就是&#x3D;&#x3D;当前项目的 git 仓库&#x3D;&#x3D;，里面包含了初始的必要文件，这些文件是&#x3D;&#x3D;git 的必要组成部分&#x3D;&#x3D;</p><h2 id="三-检查文件的状态"><a href="#三-检查文件的状态" class="headerlink" title="三.检查文件的状态"></a>三.检查文件的状态</h2><p>1.使用 git status 命令查看文件处于什么状态</p><p>2.使用 git status -s 以精简的方式显示文件状态，文件名前显示&#x3D;&#x3D;？？&#x3D;&#x3D;即该文件未被跟踪，前显示绿色的&#x3D;&#x3D;A&#x3D;&#x3D;即为新添加到暂存区的文件</p><h2 id="四-跟踪新文件"><a href="#四-跟踪新文件" class="headerlink" title="四.跟踪新文件"></a>四.跟踪新文件</h2><p>使用命令 git add 文件名即可将该文件跟踪并添加到暂存区</p><h2 id="五-提交更新"><a href="#五-提交更新" class="headerlink" title="五.提交更新"></a>五.提交更新</h2><p>暂存区中有一个文件等待被提交到 git 仓库进行保存，可以执行 git commit 命令进行提交，其中-m 选项后为本次的提交消息，用来对提交的内容进一步描述。如 git commit -m“新建了 index。html 文件”。</p><p>提交成功后，再次检查文件状态 git status，得到 nothing to commit，working tree clean 提示，说明所有文件都处于未修改状态，没有文件需要提交。</p><h2 id="六-对已提交文件进行修改"><a href="#六-对已提交文件进行修改" class="headerlink" title="六.对已提交文件进行修改"></a>六.对已提交文件进行修改</h2><p>对已提交文件进行了修改，使用 git status -s 查询会得到一个红色的&#x3D;&#x3D;M&#x3D;&#x3D;，说明其已被修改且并未放到暂存区中</p><h2 id="七-暂存已修改的文件"><a href="#七-暂存已修改的文件" class="headerlink" title="七.暂存已修改的文件"></a>七.暂存已修改的文件</h2><p>如果要暂存已修改的文件，需要再次运行 git add 命令，主要有 3 个功效：</p><p>1.可以用它开始跟踪新文件</p><p>2.把已跟踪的、且已修改的文件放到暂存区</p><p>3.把有冲突的文件标记为已解决状态</p><p>暂存已修改文件之后再次使用 git status -s 命令查询，会得到绿色的&#x3D;&#x3D;M&#x3D;&#x3D;，表示文件已修改且已放入暂存区</p><h2 id="八-提交已暂存的文件"><a href="#八-提交已暂存的文件" class="headerlink" title="八.提交已暂存的文件"></a>八.提交已暂存的文件</h2><p>再次运行 git commit -m”提交消息”命令，即可将暂存区中记录的文件的快照，提交到 git 仓库进行保存</p><h2 id="九-撤销对文件的修改"><a href="#九-撤销对文件的修改" class="headerlink" title="九.撤销对文件的修改"></a>九.撤销对文件的修改</h2><p>把对工作区中对应文件的修改，还原成 git 仓库所保存的版本。</p><p>操作的结果：所有的修改会丢失，且无法恢复！危险性比较高！命令为 git checkout –文件名</p><h2 id="十-向暂存区中一次性添加多个文件"><a href="#十-向暂存区中一次性添加多个文件" class="headerlink" title="十.向暂存区中一次性添加多个文件"></a>十.向暂存区中一次性添加多个文件</h2><p>&#x3D;&#x3D;git add .&#x3D;&#x3D;即可一次性把所有文件添加到暂存区</p><h2 id="十一-取消暂存的文件"><a href="#十一-取消暂存的文件" class="headerlink" title="十一.取消暂存的文件"></a>十一.取消暂存的文件</h2><p>如果需要从暂存区中移除对应的文件，可以使用如下命令：</p><p>git reset HEAD 要移除的文件名称</p><p>git reset HEAD . 可将所有文件移除</p><h2 id="十二-跳过使用暂存区域"><a href="#十二-跳过使用暂存区域" class="headerlink" title="十二.跳过使用暂存区域"></a>十二.跳过使用暂存区域</h2><p>在提交的时候，给 git commit 加上-a，git 就会自动把所有已跟踪文件提交到暂存区，并保存到 git 仓库。具体命令如下：</p><p>git commit -a -m “描述消息”</p><h2 id="十三-移除文件"><a href="#十三-移除文件" class="headerlink" title="十三.移除文件"></a>十三.移除文件</h2><p>从 git 仓库中移除文件有两种方式：</p><p>1.从 git 仓库和工作区中同时移除对应文件：git rm -f 文件名</p><p>2.只从 git 仓库中移除对应文件：git rm –cached 文件名</p><h2 id="十四-忽略文件"><a href="#十四-忽略文件" class="headerlink" title="十四.忽略文件"></a>十四.忽略文件</h2><p>有些文件无需纳入 git 的管理，也不希望它们总出现在为跟踪文件列表。可以创建一个名为.gitignore 的配置文件，列出要忽略的文件的匹配模式。</p><p>文件.gitignore 的格式规范如下：</p><p>1.以#开头的是注释</p><p>2.以&#x2F;结尾的是目录</p><p>3.以&#x2F;开头防止递归</p><p>4.以！开头表示取反</p><p>5.可以使用 glob 模式进行文件和文件夹的匹配（glob 指简化了的正则表达式）</p><h3 id="glob-模式"><a href="#glob-模式" class="headerlink" title="glob 模式"></a>glob 模式</h3><p>1.星号*匹配零个或多个任意字符</p><p>2.[abc]匹配任何一个列在方括号中的字符（匹配一个 a 或匹配一个 b 或匹配一个 c）</p><p>3.问号？只匹配一个任意字符</p><p>4.在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如[0-9]表示匹配所有 0 到 9 的数字）</p><p>5.两个星号&#x3D;&#x3D;<strong>&#x3D;&#x3D;表示匹配任意中间目录(比如 a&#x2F;</strong>&#x2F;z 可以匹配 a&#x2F;z，a&#x2F;b&#x2F;z 或 a&#x2F;b&#x2F;c&#x2F;z 等等)</p><p><img src="/2022/08/20/git%E5%91%BD%E4%BB%A4/img1.png"></p><p><img src="/2022/08/20/git%E5%91%BD%E4%BB%A4/img2.png" alt="image-20220227132638537"></p><h2 id="十五-查看提交历史"><a href="#十五-查看提交历史" class="headerlink" title="十五.查看提交历史"></a>十五.查看提交历史</h2><p>回顾项目的提交历史：git log</p><p>按 q 退出提交历史查看</p><p>git log -数字 查看最近的几条条提交历史</p><p>git log -数字 –pretty&#x3D;oneline 在一行显示提交历史</p><p>自定义输出格式：</p><p>git log -2 –pretty&#x3D;format：”%h|%an|%ar|%s”</p><p>|为自己设置的分隔符，%h 为唯一标识，%an 作者名字，%ar 提交时间，%s 提交说明</p><h2 id="十六-回退到指定的版本"><a href="#十六-回退到指定的版本" class="headerlink" title="十六.回退到指定的版本"></a>十六.回退到指定的版本</h2><p><img src="/2022/08/20/git%E5%91%BD%E4%BB%A4/img3.png" alt="image-20220227133536101"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Git-命令&quot;&gt;&lt;a href=&quot;#Git-命令&quot; class=&quot;headerlink&quot; title=&quot;Git 命令&quot;&gt;&lt;/a&gt;Git 命令&lt;/h1&gt;</summary>
    
    
    
    <category term="git" scheme="http://zicuan123.github.io/categories/git/"/>
    
    
    <category term="git" scheme="http://zicuan123.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>盒子实现垂直水平居中</title>
    <link href="http://zicuan123.github.io/2022/08/19/HTML-CSS/%E7%9B%92%E5%AD%90%E5%AE%9E%E7%8E%B0%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/"/>
    <id>http://zicuan123.github.io/2022/08/19/HTML-CSS/%E7%9B%92%E5%AD%90%E5%AE%9E%E7%8E%B0%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/</id>
    <published>2022-08-19T06:48:00.000Z</published>
    <updated>2022-08-19T07:56:32.491Z</updated>
    
    <content type="html"><![CDATA[<h3 id="结构："><a href="#结构：" class="headerlink" title="结构："></a>结构：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#000</span>;</span><br><span class="line">  marin: <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="comment">/* 让其水平居中 */</span></span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="comment">/*数值为父盒子高度减去子盒子高度的一半 */</span></span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h5><p><img src="/2022/08/19/HTML-CSS/%E7%9B%92%E5%AD%90%E5%AE%9E%E7%8E%B0%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/img1.png" alt="效果图"></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#000</span>;</span><br><span class="line">  marin: <span class="number">100px</span> auto;</span><br><span class="line">  <span class="comment">/* 父盒子加相对定位 */</span></span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="comment">/* 子盒子加绝对定位 */</span></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="comment">/* 因为定位的原点是在左上角，所以定位之后要加位移让其返回自己宽高的一半，才能实现垂直水平居中*/</span></span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#000</span>;</span><br><span class="line">  marin: <span class="number">100px</span> auto;</span><br><span class="line">  <span class="comment">/* 父盒子加相对定位 */</span></span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="comment">/* 子盒子加绝对定位 */</span></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="comment">/* 给子盒子的上下左右都为0，是为了让其知道自己与父盒子上下左右的距离，</span></span><br><span class="line"><span class="comment">  这样子盒子就能通过margin：auto 实现垂直水平居中*/</span></span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#000</span>;</span><br><span class="line">  marin: <span class="number">100px</span> auto;</span><br><span class="line">  <span class="comment">/* 让盒子变成弹性容器 */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="comment">/* 让弹性盒子主轴方向(默认方向为水平方向) 居中*/</span></span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="comment">/* 让弹性盒子侧轴方向(默认方向为垂直方向) 居中*/</span></span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;结构：&quot;&gt;&lt;a href=&quot;#结构：&quot; class=&quot;headerlink&quot; title=&quot;结构：&quot;&gt;&lt;/a&gt;结构：&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;box&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;son&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="HTML" scheme="http://zicuan123.github.io/categories/HTML/"/>
    
    
    <category term="HTML" scheme="http://zicuan123.github.io/tags/HTML/"/>
    
    <category term="CSS" scheme="http://zicuan123.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS文本超出隐藏</title>
    <link href="http://zicuan123.github.io/2022/08/17/HTML-CSS/%E6%96%87%E6%9C%AC%E8%B6%85%E5%87%BA%E9%9A%90%E8%97%8F/"/>
    <id>http://zicuan123.github.io/2022/08/17/HTML-CSS/%E6%96%87%E6%9C%AC%E8%B6%85%E5%87%BA%E9%9A%90%E8%97%8F/</id>
    <published>2022-08-17T11:48:35.000Z</published>
    <updated>2022-08-19T11:00:28.360Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单行文本超出隐藏"><a href="#单行文本超出隐藏" class="headerlink" title="单行文本超出隐藏"></a>单行文本超出隐藏</h2><span id="more"></span><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 第一步:溢出隐藏 */</span></span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="comment">/* 既然是单行文本,就不能换行 */</span></span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="comment">/* 文本溢出的部分,用省略号来代替 */</span></span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><p>长串英文字母和数字默认是一个单词，为了其完整性，默认并不会主动换行</p><h2 id="多行文本超出隐藏"><a href="#多行文本超出隐藏" class="headerlink" title="多行文本超出隐藏"></a>多行文本超出隐藏</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 目的:实现3行文本溢出用省略号显示 */</span></span><br><span class="line">  -webkit-line-clamp: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 单行文本需要考虑盒子的宽度,才能还原需求 */</span></span><br><span class="line">  <span class="comment">/* 多行文本需要考虑盒子的宽度和高度,才能还原需求 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;单行文本超出隐藏&quot;&gt;&lt;a href=&quot;#单行文本超出隐藏&quot; class=&quot;headerlink&quot; title=&quot;单行文本超出隐藏&quot;&gt;&lt;/a&gt;单行文本超出隐藏&lt;/h2&gt;</summary>
    
    
    
    <category term="HTML" scheme="http://zicuan123.github.io/categories/HTML/"/>
    
    
    <category term="CSS" scheme="http://zicuan123.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo搭建博客并部署到GitHub</title>
    <link href="http://zicuan123.github.io/2022/08/13/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://zicuan123.github.io/2022/08/13/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2022-08-13T13:30:34.000Z</published>
    <updated>2022-08-21T10:05:24.955Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><span id="more"></span><p>[Hexo 官方安装教程](<a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a>)</p><h2 id="GitHub-配置"><a href="#GitHub-配置" class="headerlink" title="GitHub 配置"></a>GitHub 配置</h2><h3 id="1-新建仓库"><a href="#1-新建仓库" class="headerlink" title="1.新建仓库"></a>1.新建仓库</h3><p>仓库的名字不能随便取，必须是你的 GitHub 用户名加.github.io</p><h3 id="2-配置-SSH-免密登录"><a href="#2-配置-SSH-免密登录" class="headerlink" title="2.配置 SSH 免密登录"></a>2.配置 SSH 免密登录</h3><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的 github 权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用 ssh key 来解决本地和服务器的连接问题。</p><p>简单的来说就是给予你当前电脑访问你 GitHub 仓库的权限</p><h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol><li>随意找一个文件夹，右键用 git bash hero 打开</li><li>输入指令<code>ssh-keygen -t rsa -C &quot;邮箱&quot;</code> 此处邮箱填写自己的邮箱</li><li>回车敲击三次，成功后会生成一个文件夹，路径在 C:\Users\ .ssh</li><li>文件夹里有两个文件，其中一个<strong>id_rsa id_rsa.pub</strong>就是我们的公开的 ssh 码，也是给管理员这个 ssh，让他来添加</li><li>在 GitHub 或者 Gitee 上添加 SSH key</li><li><ul><li>Title： 随便写</li><li>Key：将本地的 id_rsa.pub 文件用记事本打开，复制全部内容粘贴到 GitHub 仓库的 SSH Keys 位置</li></ul></li></ol><p><img src="/2022/08/13/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image1.png" alt="image-20220815143959539"></p><h3 id="3-将博客部署到-github-个人主页上"><a href="#3-将博客部署到-github-个人主页上" class="headerlink" title="3.将博客部署到 github 个人主页上"></a>3.将博客部署到 github 个人主页上</h3><ol><li><p>第一步 在创建的博客文件的根目录下右键用 git bash hero 打开</p></li><li><p>输入命令：<code>npm install hexo-deployer-git --save</code> 安装 说明：必须安装，否则执行 hexo d 的话会报错</p></li><li><p>编辑博客根目录下的_config.yml 文件, 在文件末尾修改配置文件：</p></li><li><pre><code class="js">deploy:  type: git  repository: github上对应仓库的ssh 链接    //也可使用https地址，如：https://github.com/Github用户名/Github用户名.github.io.git  branch: main  //此为github默认的主分支，之前是master 现在改为了main ，切记一定要改为main</code></pre></li></ol><p><strong>说明：</strong>仓库的 ssh 链接如下</p><p><img src="/2022/08/13/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image2.png" alt="image-20220815144613878"></p><ol start="5"><li>在 git 命令里输入 hexo clean 再输入 hexo g 最后输入 hexo d</li></ol><p>至此博客就部署好了 <strong>此处附加上 hexo 框架常用的指令：</strong></p><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>hexo clean &amp;&amp; hexo g</td><td>清除本地项目并重新生成 （重新部署时使用）</td></tr><tr><td>hexo g</td><td>重新生成</td></tr><tr><td>hexo s</td><td>开启本地预览</td></tr><tr><td>hexo d</td><td>推送到 github</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt;（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;/p&gt;</summary>
    
    
    
    <category term="Hexo" scheme="http://zicuan123.github.io/categories/Hexo/"/>
    
    
    <category term="hexo搭建" scheme="http://zicuan123.github.io/tags/hexo%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Next主题的使用与美化</title>
    <link href="http://zicuan123.github.io/2022/08/13/Next/"/>
    <id>http://zicuan123.github.io/2022/08/13/Next/</id>
    <published>2022-08-13T13:30:34.000Z</published>
    <updated>2022-08-17T09:08:59.135Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><a href="http://theme-next.iissnan.com/getting-started.html">Next 官方教程 - 开始使用</a><span id="more"></span></li><li><a href="http://theme-next.iissnan.com/theme-settings.html">Next 官方教程 - 主题配置</a></li><li><a href="http://theme-next.iissnan.com/faqs.html">Next 官方教程 - 常见问题</a></li></ul><h2 id="Next-安装"><a href="#Next-安装" class="headerlink" title="Next 安装"></a>Next 安装</h2><h3 id="Next-主题安装"><a href="#Next-主题安装" class="headerlink" title="Next 主题安装"></a>Next 主题安装</h3><p>克隆整个 Next 仓库 现在的 next 版本已更新到了 8.0 版本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 克隆代码（<span class="title class_">Next</span>不同版本使用不同仓库）</span><br><span class="line">$ git clone <span class="attr">https</span>:<span class="comment">//github.com/theme-next/hexo-theme-next themes/next</span></span><br></pre></td></tr></table></figure><p>更改 Next 主题的配置文件 <code>themes/next/_config.yml</code>，设置以下内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme</span>: next</span><br></pre></td></tr></table></figure><p>日后可以随时使用 Git 更新当前 Next 的版本，并切换到任何带标签的版本，或者切换到最新的 <code>main</code> 主分支 或任何其他分支。在大多数情况下，这对用户和开发人员都有用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 进入主题目录</span><br><span class="line">$ cd themes/next</span><br><span class="line"></span><br><span class="line"># 查看带标签的版本</span><br><span class="line">$ git tag -l</span><br><span class="line">v6<span class="number">.0</span><span class="number">.0</span></span><br><span class="line">v6<span class="number">.0</span><span class="number">.1</span></span><br><span class="line">v6<span class="number">.0</span><span class="number">.2</span></span><br><span class="line">…</span><br><span class="line"></span><br><span class="line"># 切换到特定标签的版本</span><br><span class="line">$ git checkout tags/v6<span class="number">.0</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line"># 重新切换为main分支</span><br><span class="line">$ git checkout main</span><br><span class="line"></span><br><span class="line"># 更新代码</span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure><h2 id="Next-常规配置"><a href="#Next-常规配置" class="headerlink" title="Next 常规配置"></a>Next 常规配置</h2><h3 id="显示头像"><a href="#显示头像" class="headerlink" title="显示头像"></a>显示头像</h3><p>更改 Next 主题的配置文件 <code>themes/next/_config.yml</code>，设置以下内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">avatar</span>:</span><br><span class="line">  <span class="attr">url</span>: <span class="regexp">/images/</span>avatar.<span class="property">png</span>      # 头像图片</span><br><span class="line">  <span class="attr">rounded</span>: <span class="literal">true</span>                # 头像设置为圆形</span><br><span class="line">  <span class="attr">rotated</span>: <span class="literal">true</span>                # 鼠标焦点落在头像时，是否转动头像</span><br></pre></td></tr></table></figure><h3 id="菜单显示中文"><a href="#菜单显示中文" class="headerlink" title="菜单显示中文"></a>菜单显示中文</h3><p>在博客的根目录里，找到 <code>_config.yml</code> 文件，然后设置以下的配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language</span>: zh - <span class="variable constant_">CN</span></span><br></pre></td></tr></table></figure><h3 id="启用文章目录"><a href="#启用文章目录" class="headerlink" title="启用文章目录"></a>启用文章目录</h3><p>更改 Next 主题的配置文件 <code>themes/next/_config.yml</code>，设置以下内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">toc</span>:</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">number</span>: <span class="literal">false</span>           # 自动添加目录编号</span><br><span class="line">  <span class="attr">wrap</span>: <span class="literal">true</span>              # 每行目录字数超长自动换行</span><br><span class="line">  <span class="attr">expand_all</span>: <span class="literal">true</span>        # 展开所有级别</span><br><span class="line">  <span class="attr">max_depth</span>: <span class="number">5</span>            # 目录的最大深度</span><br></pre></td></tr></table></figure><h3 id="启用文章打赏"><a href="#启用文章打赏" class="headerlink" title="启用文章打赏"></a>启用文章打赏</h3><p>更改 Next 主题的配置文件 <code>themes/next/_config.yml</code>，设置以下内容，需要将收款二维码图片放到 <code>themes/next/source/images</code> 文件夹下，或者使用自定义的图片目录路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">reward_settings</span>:</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">animation</span>: <span class="literal">false</span></span><br><span class="line">  <span class="attr">comment</span>: 坚持原创技术分享，您的支持将鼓励我继续创作！</span><br><span class="line"></span><br><span class="line"><span class="attr">reward</span>:</span><br><span class="line">  <span class="attr">wechatpay</span>: <span class="regexp">/images/</span>wechatpay.<span class="property">png</span></span><br><span class="line">  <span class="attr">alipay</span>: <span class="regexp">/images/</span>alipay.<span class="property">png</span></span><br></pre></td></tr></table></figure><h3 id="添加版权声明"><a href="#添加版权声明" class="headerlink" title="添加版权声明"></a>添加版权声明</h3><p>更改 Next 主题的配置文件 <code>themes/next/_config.yml</code>，设置以下内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">creative_commons</span>:</span><br><span class="line">  <span class="attr">license</span>: by-nc-sa       # <span class="title class_">License</span>类型： by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span><br><span class="line">  <span class="attr">sidebar</span>: <span class="literal">false</span>          # 在侧边栏有一个版权的图片链接</span><br><span class="line">  <span class="attr">post</span>: <span class="literal">true</span>              # 在每一篇文章末尾自动增加本文作者、本文链接、版权声明信息</span><br><span class="line">  <span class="attr">language</span>: deed.<span class="property">zh</span>       # 点击链接后显示的版权信息的语言</span><br></pre></td></tr></table></figure><h3 id="添加标签页面"><a href="#添加标签页面" class="headerlink" title="添加标签页面"></a>添加标签页面</h3><p>通过 Hexo 创建一个标签页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 进入博客的根目录</span><br><span class="line">$ cd $&#123;blog-root&#125;/</span><br><span class="line"></span><br><span class="line"># 创建标签页</span><br><span class="line">$ hexo <span class="keyword">new</span> page tags</span><br></pre></td></tr></table></figure><p>创建完标签页后，发现 <code>source</code> 文件夹下会多了 <code>tags/index.md</code> 文件，这个文件是用于显示站点内所有分类标签的，复制以下内容到 <code>tags/index.md</code> 中，必须使用 <code>---</code> 包裹配置内容，否则配置无效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="attr">title</span>: 标签</span><br><span class="line"><span class="attr">type</span>: <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="attr">comments</span>: <span class="literal">false</span></span><br><span class="line"><span class="attr">date</span>: <span class="number">2021</span>-<span class="number">04</span>-<span class="number">05</span> <span class="number">17</span>:<span class="number">13</span>:<span class="number">00</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><strong>若博客有集成评论服务，标签页面也会带有评论，需要关闭的话，请添加字段 <code>comments</code> 并将值设置为 <code>false</code></strong></p><p>更改 Next 主题的配置文件 <code>themes/next/_config.yml</code>，设置以下内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu</span>:</span><br><span class="line">  <span class="attr">tags</span>: <span class="regexp">/tags/</span> || fa fa-tags</span><br></pre></td></tr></table></figure><h3 id="添加网站备案号"><a href="#添加网站备案号" class="headerlink" title="添加网站备案号"></a>添加网站备案号</h3><p>更改 Next 主题的配置文件 <code>themes/next/_config.yml</code>，设置以下内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">beian</span>: <span class="attr">enable</span>: <span class="literal">true</span></span><br><span class="line"><span class="attr">icp</span>: <span class="string">&#x27;粤ICP备19024664号&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="开启阅读全文按钮"><a href="#开启阅读全文按钮" class="headerlink" title="开启阅读全文按钮"></a>开启阅读全文按钮</h3><p>next 主题文章默认会在主页全部显示出来</p><p>只需在文章需要隐藏的部分添加&lt; !– more –&gt; 即可在首页只显示 more 分割线以上的内容，并显示出阅读全文按钮</p><p>此处为了让其显示出来，在！前打了一个空格，使用时记住删掉空格</p><h3 id="添加右上角github绑带"><a href="#添加右上角github绑带" class="headerlink" title="添加右上角github绑带"></a>添加右上角github绑带</h3><p>打开主题配置<code>_config.yml</code>，进行相关参数设置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># <span class="title class_">Value</span> after <span class="string">`||`</span> delimeter is the title and aria-label name.</span><br><span class="line"><span class="attr">github_banner</span>: <span class="attr">https</span>:<span class="comment">//github.com/nightmaredimple || Follow me on GitHub #添加右上角github绑带</span></span><br></pre></td></tr></table></figure><h2 id="Next-进阶配置"><a href="#Next-进阶配置" class="headerlink" title="Next 进阶配置"></a>Next 进阶配置</h2><h3 id="添加背景图片"><a href="#添加背景图片" class="headerlink" title="添加背景图片"></a>添加背景图片</h3><ul><li><p>1.将自己想要设置的背景图片保存到<code>themes/next/source/images</code>中，或者复制链接</p></li><li><p>2.在<code>themes/next/source/</code>下新建一个名为<code>_data</code>的文件夹，在文件夹里新建一个<code>styles.styl</code>文件</p></li><li><p>3.在文件中添加如下代码,可以自己修改样式</p></li><li><pre><code class="css">body &#123;     background:url(/images/IU.jpg);     background-repeat: no-repeat;  background-attachment:fixed;  background-position: 50% 50%;  background-size: cover;&#125;//博客内容透明化//文章内容的透明度设置.content-wrap &#123;  opacity: 0.8;&#125;.main-inner &#123;    // margin-top: 60px;   // padding: 60px 60px 60px 60px;   // opacity: 0.8;&#125;//侧边框的透明度设置.sidebar &#123;  opacity: 0.8;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 4.将`themes/next/_config.yml`配置文件中`custom_file_path:`下的`#style: source/_data/styles.styl`#号去掉</span><br><span class="line"></span><br><span class="line">- 5.在`themes/next/source/css`下找到`main.styl`文件，并在最后一行添上如下代码：</span><br><span class="line"></span><br><span class="line">- ```css</span><br><span class="line">  // Custom Layer</span><br><span class="line">  // --------------------------------------------------</span><br><span class="line">  for $inject_style in hexo-config(&#x27;injects.style&#x27;)</span><br><span class="line">    @import &#x27;../_data/styles.styl&#x27;;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>6.在git bash hero 中执行以下命令：</p></li><li><p>&#96;&#96;&#96;js<br>hexo clean<br>hexo g<br>hexo s</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 启用 Pjax</span><br><span class="line"></span><br><span class="line">Pjax 主要用于加速 Web 页面的切换速度，同时也可以用来解决 Aplayer 音频播发器切换页面后播放出现中断的问题</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line"># 进入Next主题的目录</span><br><span class="line">$ cd themes/next</span><br><span class="line"></span><br><span class="line"># 下载资源文件</span><br><span class="line">$ git clone https://github.com/theme-next/theme-next-pjax source/lib/pjax</span><br></pre></td></tr></table></figure></li></ul><p>更改 Next 主题的配置文件 <code>themes/next/_config.yml</code>，设置以下内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pjax</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="启用图片点击居中预览"><a href="#启用图片点击居中预览" class="headerlink" title="启用图片点击居中预览"></a>启用图片点击居中预览</h3><p>更改 Next 主题的配置文件 <code>themes/next/_config.yml</code>，设置以下内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mediumzoom</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="添加页面顶部加载进度条"><a href="#添加页面顶部加载进度条" class="headerlink" title="添加页面顶部加载进度条"></a>添加页面顶部加载进度条</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 进入<span class="title class_">Next</span>主题的目录</span><br><span class="line">$ cd themes/next</span><br><span class="line"></span><br><span class="line"># 克隆代码</span><br><span class="line">$ git clone <span class="attr">https</span>:<span class="comment">//github.com/theme-next/theme-next-pace source/lib/pace</span></span><br></pre></td></tr></table></figure><p>更改 Next 主题的配置文件 <code>themes/next/_config.yml</code>，设置以下内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pace</span>:</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">theme</span>: minimal</span><br></pre></td></tr></table></figure><h3 id="添加页面顶部阅读进度条"><a href="#添加页面顶部阅读进度条" class="headerlink" title="添加页面顶部阅读进度条"></a>添加页面顶部阅读进度条</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 进入<span class="title class_">Next</span>主题的目录</span><br><span class="line">$ cd themes/next</span><br><span class="line"></span><br><span class="line"># 克隆代码</span><br><span class="line">$ git clone <span class="attr">https</span>:<span class="comment">//github.com/theme-next/theme-next-reading-progress source/lib/reading_progress</span></span><br></pre></td></tr></table></figure><p>更改 Next 主题的配置文件 <code>themes/next/_config.yml</code>，设置以下内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">reading_progress</span>:</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">position</span>: top               # 进度条的位置：top | bottom</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&quot;#37c6c0&quot;</span>            # 进度条的颜色</span><br><span class="line">  <span class="attr">height</span>: 3px                 # 进度条的大小</span><br></pre></td></tr></table></figure><h3 id="显示侧栏阅读进度百分比"><a href="#显示侧栏阅读进度百分比" class="headerlink" title="显示侧栏阅读进度百分比"></a>显示侧栏阅读进度百分比</h3><p>更改 Next 主题的配置文件 <code>themes/next/_config.yml</code>，设置以下内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">back2top</span>:</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">sidebar</span>: <span class="literal">false</span></span><br><span class="line">  <span class="attr">scrollpercent</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="增加文章结束标志"><a href="#增加文章结束标志" class="headerlink" title="增加文章结束标志"></a>增加文章结束标志</h3><p>在路径<code>/themes/next/layout/_macro</code>文件夹中新建passage-end-tag.njk文件：</p><p>打开passage-end-tag.njk文件，添加以下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;color: #ccc;font-size:14px;&quot;</span>&gt;</span>-------------本文结束<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-paw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>感谢您的阅读-------------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打开<code>/themes/next/layout/_macro/post.njk</code>，在post-body之后，post-footer之前，添加以下代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include &#x27;passage-end-tag.swig&#x27; %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后打开主题配置文件<code>_config.yml</code>,在末尾添加：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line"><span class="attr">passage_end_tag</span>:</span><br><span class="line">  <span class="attr">enabled</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="Next-页面样式更改"><a href="#Next-页面样式更改" class="headerlink" title="Next 页面样式更改"></a>Next 页面样式更改</h2><h3 id="超链接样式"><a href="#超链接样式" class="headerlink" title="超链接样式"></a>超链接样式</h3><p>打开 CSS 文件 <code>themes/next/source/css/_common/components/post/post.styl</code>，在末尾添加以下 CSS 样式，颜色可自定义，在这里超链接选中状态为橙色，链接样式为蓝色</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">post</span>-body p a&#123;</span><br><span class="line">  <span class="attr">color</span>: #0593d3;</span><br><span class="line">  border-<span class="attr">bottom</span>: none;</span><br><span class="line">  border-<span class="attr">bottom</span>: 1px solid #0593d3;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="attr">color</span>: #fc6423;</span><br><span class="line">    border-<span class="attr">bottom</span>: none;</span><br><span class="line">    border-<span class="attr">bottom</span>: 1px solid #fc6423;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码块高亮样式"><a href="#代码块高亮样式" class="headerlink" title="代码块高亮样式"></a>代码块高亮样式</h3><p>更改 Next 主题的配置文件 <code>themes/next/_config.yml</code>，设置以下内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">codeblock</span>:</span><br><span class="line">  <span class="attr">highlight_theme</span>: <span class="string">&#x27;night eighties&#x27;</span>           # 代码高亮可选样式: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span><br><span class="line">  <span class="attr">copy_button</span>:</span><br><span class="line">    <span class="attr">enable</span>: <span class="literal">true</span>                    # 启用代码复制按钮</span><br><span class="line">    <span class="attr">show_result</span>: <span class="literal">false</span>              # 显示代码复制结果</span><br><span class="line">    <span class="attr">style</span>: flat                     # 代码块可选样式: <span class="keyword">default</span> | flat | mac</span><br></pre></td></tr></table></figure><h2 id="Next-安装常用插件"><a href="#Next-安装常用插件" class="headerlink" title="Next 安装常用插件"></a>Next 安装常用插件</h2><h3 id="本地搜索插件"><a href="#本地搜索插件" class="headerlink" title="本地搜索插件"></a>本地搜索插件</h3><p>Next 主题默认支持使用 <a href="https://github.com/theme-next/hexo-generator-searchdb">Hexo-Generator-Searchdb</a> 插件来实现本地搜索，前提是需要手动安装对应的插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 进入博客的根目录</span><br><span class="line">$ cd $&#123;blog-root&#125;/</span><br><span class="line"></span><br><span class="line"># 安装搜索插件</span><br><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>在博客的根目录里，找到 <code>_config.yml</code> 文件，然后添加如下的配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search</span>:</span><br><span class="line">  <span class="attr">path</span>: search.<span class="property">xml</span></span><br><span class="line">  <span class="attr">field</span>: post</span><br><span class="line">  <span class="attr">content</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">format</span>: html</span><br><span class="line">  <span class="attr">limit</span>: <span class="number">1000</span></span><br></pre></td></tr></table></figure><p>更改 Next 主题的配置文件 <code>themes/next/_config.yml</code>，设置以下内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search</span>:</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">trigger</span>: auto</span><br><span class="line">  <span class="attr">top_n_per_article</span>: <span class="number">1</span></span><br><span class="line">  <span class="attr">unescape</span>: <span class="literal">false</span></span><br><span class="line">  <span class="attr">preload</span>: <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="RSS-订阅插件"><a href="#RSS-订阅插件" class="headerlink" title="RSS 订阅插件"></a>RSS 订阅插件</h3><p><code>hexo-generator-feed</code> 插件用于在 <code>public</code> 目录下自动生成 <code>atom.xml</code> 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 进入博客的根目录</span><br><span class="line">$ cd $&#123;blog-root&#125;/</span><br><span class="line"></span><br><span class="line"># 安装<span class="variable constant_">RSS</span>订阅插件</span><br><span class="line">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>在博客的根目录里，找到 <code>_config.yml</code> 文件，然后进行相关参数修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># <span class="title class_">Extensions</span></span><br><span class="line">## <span class="title class_">Plugins</span>: <span class="attr">http</span>:<span class="comment">//hexo.io/plugins/</span></span><br><span class="line"><span class="attr">plugins</span>: hexo-generate-feed</span><br></pre></td></tr></table></figure><p>更改 Next 主题的配置文件 <code>themes/next/_config.yml</code>，设置以下内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social</span>:</span><br><span class="line">  <span class="attr">RSS</span>: /atom.<span class="property">xml</span> || fa fa-rss</span><br></pre></td></tr></table></figure><h3 id="字数与阅读时长统计插件"><a href="#字数与阅读时长统计插件" class="headerlink" title="字数与阅读时长统计插件"></a>字数与阅读时长统计插件</h3><p>Next 主题默认支持使用 <a href="https://github.com/theme-next/hexo-symbols-count-time">hexo-symbols-count-time</a> 插件来统计文章字数和阅读时长，前提是需要手动安装对应的插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 进入博客的根目录</span><br><span class="line">$ cd $&#123;blog-root&#125;/</span><br><span class="line"></span><br><span class="line"># 安装依赖</span><br><span class="line">$ npm install eslint --save</span><br><span class="line"></span><br><span class="line"># 安装插件</span><br><span class="line">$ npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure><p>在博客的根目录里，找到 <code>_config.yml</code> 文件，然后添加如下的配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time</span>:</span><br><span class="line">  <span class="attr">time</span>: <span class="literal">true</span>                   # 文章阅读时长</span><br><span class="line">  <span class="attr">symbols</span>: <span class="literal">true</span>                # 文章字数统计</span><br><span class="line">  <span class="attr">total_time</span>: <span class="literal">true</span>             # 站点总阅读时长</span><br><span class="line">  <span class="attr">total_symbols</span>: <span class="literal">true</span>          # 站点总字数统计</span><br><span class="line">  <span class="attr">exclude_codeblock</span>: <span class="literal">true</span>      # 排除代码字数统计</span><br></pre></td></tr></table></figure><p>更改 Next 主题的配置文件 <code>themes/next/_config.yml</code>，设置以下内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time</span>:</span><br><span class="line">  <span class="attr">separated_meta</span>: <span class="literal">false</span>         # 是否另起一行显示（即不和发表时间等同一行显示）</span><br><span class="line">  <span class="attr">item_text_post</span>: <span class="literal">true</span>          # 首页文章统计数量前是否显示文字描述（本文字数、阅读时长）</span><br><span class="line">  <span class="attr">item_text_total</span>: <span class="literal">false</span>        # 页面底部统计数量前是否显示文字描述（站点总字数、站点阅读时长）</span><br></pre></td></tr></table></figure><h3 id="看板娘插件"><a href="#看板娘插件" class="headerlink" title="看板娘插件"></a>看板娘插件</h3><p>安装看板娘插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -save hexo-helper-live2d</span><br></pre></td></tr></table></figure><p>更改 Next 主题的配置文件 <code>themes/next/_config.yml</code>，然后添加如下的配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">live2d</span>:</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom</span>: local</span><br><span class="line">  <span class="attr">pluginRootPath</span>: live2dw/</span><br><span class="line">  <span class="attr">pluginJsPath</span>: lib/</span><br><span class="line">  <span class="attr">pluginModelPath</span>: assets/</span><br><span class="line">  <span class="attr">tagMode</span>: <span class="literal">false</span></span><br><span class="line">  <span class="attr">log</span>: <span class="literal">false</span></span><br><span class="line">  <span class="attr">model</span>:</span><br><span class="line">    <span class="attr">use</span>: live2d-widget-model-tororo</span><br><span class="line">  <span class="attr">display</span>:</span><br><span class="line">    <span class="attr">position</span>: right</span><br><span class="line">    <span class="attr">width</span>: <span class="number">150</span></span><br><span class="line">    <span class="attr">height</span>: <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile</span>:</span><br><span class="line">    <span class="attr">show</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">react</span>:</span><br><span class="line">    <span class="attr">opacity</span>: <span class="number">0.7</span></span><br></pre></td></tr></table></figure><p>use对应的参数，可以对照着<a href="https://github.com/xiazeyu/live2d-widget-models">lived2d</a>进行选择</p><h2 id="图片无法显示的完美解决"><a href="#图片无法显示的完美解决" class="headerlink" title="图片无法显示的完美解决"></a>图片无法显示的完美解决</h2><p>1.要添加图片，先npm install 一个<a href="https://so.csdn.net/so/search?q=hexo&spm=1001.2101.3001.7020">hexo</a>-asset-image的依赖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="attr">https</span>:<span class="comment">//github.com/CodeFalling/hexo-asset-image --save</span></span><br></pre></td></tr></table></figure><p>2.然后把_config.yml中的post_asset_folder设为true，这个配置的意思是每次new post一个博客，会增加一个和博客同名的文件夹。</p><p>3.把图片放到.md文件的同名文件夹”first-page”里，最后在.md文件中引用图片</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片描述]（./文件名/图片名）</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://theme-next.iissnan.com/getting-started.html&quot;&gt;Next 官方教程 - 开始使用&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="Hexo" scheme="http://zicuan123.github.io/categories/Hexo/"/>
    
    
    <category term="hexo搭建" scheme="http://zicuan123.github.io/tags/hexo%E6%90%AD%E5%BB%BA/"/>
    
    <category term="next主题" scheme="http://zicuan123.github.io/tags/next%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>HTML、CSS底层原理问题</title>
    <link href="http://zicuan123.github.io/2022/08/13/HTML-CSS/HTML%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    <id>http://zicuan123.github.io/2022/08/13/HTML-CSS/HTML%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</id>
    <published>2022-08-13T13:30:34.000Z</published>
    <updated>2022-08-17T12:10:22.367Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-margin-auto-为什么只能实现块级盒子的水平居中无法实现垂直居中"><a href="#1-margin-auto-为什么只能实现块级盒子的水平居中无法实现垂直居中" class="headerlink" title="1.margin: auto 为什么只能实现块级盒子的水平居中无法实现垂直居中?"></a>1.margin: auto 为什么只能实现块级盒子的水平居中无法实现垂直居中?</h3><h5 id="1-水平居中原理"><a href="#1-水平居中原理" class="headerlink" title="1.水平居中原理"></a>1.水平居中原理</h5><p>因为块级元素具有默认宽度，默认为其父级宽度的百分之百，所以块级元素知道往右走多少能够到达中间位置</p><span id="more"></span><h5 id="2-无法垂直居中原理"><a href="#2-无法垂直居中原理" class="headerlink" title="2.无法垂直居中原理"></a>2.无法垂直居中原理</h5><p>块级元素的默认高度为 0，所以当想使用<code>margin：auto</code>让其居中时，它只知道水平方向的距离，不知道垂直方向的距离</p><h3 id="2-为何下列代码实现的盒子没有背景颜色"><a href="#2-为何下列代码实现的盒子没有背景颜色" class="headerlink" title="2.为何下列代码实现的盒子没有背景颜色"></a>2.为何下列代码实现的盒子没有背景颜色</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">小猫.png</span>) no-repeat right center;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">60px</span> <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/08/13/HTML-CSS/HTML%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image1.png" alt="小猫"></p><h5 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h5><ol><li>background 是复合属性，复合属性会覆盖掉上一层的背景色</li><li>background 的默认颜色是透明色，所以 transparent 覆盖掉了 pink</li></ol><h5 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h5><ol><li>都使用复合属性</li><li>把单一的属性卸载复合属性后面，覆盖掉默认的参数</li></ol><h3 id="3-body-和-html-标签的默认高度"><a href="#3-body-和-html-标签的默认高度" class="headerlink" title="3.body 和 html 标签的默认高度"></a>3.body 和 html 标签的默认高度</h3><h5 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h5><p>body 和 html 的默认高度都为 0，这也是以下代码为何没有任何样式出现的原因</p><p><img src="/2022/08/13/HTML-CSS/HTML%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image2.png" alt="image-20220817142953738"></p><p>浏览器样式：<img src="/2022/08/13/HTML-CSS/HTML%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image3.png" alt="image-20220817142812467"></p><p>因为 box 的高度 100%是继承的 body 的，而 body 的高度默认为 0，所以 box 的高度为 0，因此页面没有任何样式出现</p><h3 id="问以下代码页面会呈现什么颜色"><a href="#问以下代码页面会呈现什么颜色" class="headerlink" title="问以下代码页面会呈现什么颜色"></a>问以下代码页面会呈现什么颜色</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="答案-：天蓝色"><a href="#答案-：天蓝色" class="headerlink" title="答案 ：天蓝色"></a>答案 ：天蓝色</h5><h6 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h6><p>当 body(默认高度为 0)有颜色的时候,浏览器判定你需要让全屏都呈现一个颜色,就会把颜色拿过去,自己显示</p><p>当 body 和 html(默认高度为 0)同时有背景色时,浏览器会觉得 html 离自己更近,所以会选择使用 html 的颜色</p><h6 id="误区"><a href="#误区" class="headerlink" title="误区"></a>误区</h6><p>此时的 body 和 html 高度依然是 0，页面显示的颜色是浏览器的原因，而与 body 和 html 无关</p><p>浏览器会替页面做很多操作</p><h3 id="浏览器渲染-html-的顺序"><a href="#浏览器渲染-html-的顺序" class="headerlink" title="浏览器渲染 html 的顺序"></a>浏览器渲染 html 的顺序</h3><h6 id="解析-2"><a href="#解析-2" class="headerlink" title="解析"></a>解析</h6><p>从上到下，这也是为什么 style 标签要写在 head 标签里的原因，为了 head 先一步与 body 执行</p><p>如果样式写在结构后面，浏览器会先渲染结构，再渲染样式</p><p>比如 img 标签，如果先渲染结构，因为 img 是有默认大小的，如果此时网速卡顿，页面就会将 img 的默认大小显示出来，这对于用户体验非常差</p><p>因此将样式写在结构前，先解析样式定义 先告诉浏览器 img 必须是写好的样式大小，执行到 img 的时候，就会按照写好的样式渲染</p><h3 id="版心的作用"><a href="#版心的作用" class="headerlink" title="版心的作用"></a>版心的作用</h3><h6 id="为什么版心通常都在-980-1250-之间"><a href="#为什么版心通常都在-980-1250-之间" class="headerlink" title="为什么版心通常都在 980 - 1250 之间"></a>为什么版心通常都在 980 - 1250 之间</h6><p>因为市面上常见的分辨率 1366 - 1920 取此区间,就是为了让绝大部分用户都可以正常访问网页</p><p><strong>因为版心在此区间,还有水平居中属性,所以让网页的主题内容全部呈现在页面的正中央</strong></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1-margin-auto-为什么只能实现块级盒子的水平居中无法实现垂直居中&quot;&gt;&lt;a href=&quot;#1-margin-auto-为什么只能实现块级盒子的水平居中无法实现垂直居中&quot; class=&quot;headerlink&quot; title=&quot;1.margin: auto 为什么只能实现块级盒子的水平居中无法实现垂直居中?&quot;&gt;&lt;/a&gt;1.margin: auto 为什么只能实现块级盒子的水平居中无法实现垂直居中?&lt;/h3&gt;&lt;h5 id=&quot;1-水平居中原理&quot;&gt;&lt;a href=&quot;#1-水平居中原理&quot; class=&quot;headerlink&quot; title=&quot;1.水平居中原理&quot;&gt;&lt;/a&gt;1.水平居中原理&lt;/h5&gt;&lt;p&gt;因为块级元素具有默认宽度，默认为其父级宽度的百分之百，所以块级元素知道往右走多少能够到达中间位置&lt;/p&gt;</summary>
    
    
    
    <category term="HTML" scheme="http://zicuan123.github.io/categories/HTML/"/>
    
    
    <category term="HTML" scheme="http://zicuan123.github.io/tags/HTML/"/>
    
    <category term="CSS" scheme="http://zicuan123.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown快速入门(Typora)</title>
    <link href="http://zicuan123.github.io/2022/08/12/markdown/"/>
    <id>http://zicuan123.github.io/2022/08/12/markdown/</id>
    <published>2022-08-12T11:06:15.144Z</published>
    <updated>2022-08-14T12:58:10.990Z</updated>
    
    <content type="html"><![CDATA[<h2 id="markdown-简介"><a href="#markdown-简介" class="headerlink" title="markdown 简介"></a>markdown 简介</h2><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档<span id="more"></span>，然后转换成格式丰富的 HTML 页面。这几年 Markdown 编辑器以其独到的优势迅速火起来了，很多写作平台都开始支持了。<br>Markdown 语法常用的也就十个左右，Markdown 编辑器深受技术人员和效率写手的喜爱，很多 Markdown 编辑器还可以轻松地将文本转换为 pdf 等格式。</p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>#+空格，1个#号表示1级标题，6个#表示6级标题，#号越多字体越小。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 标题1</span><br><span class="line">## 标题2</span><br><span class="line">### 标题3</span><br><span class="line">#### 标题4</span><br><span class="line">##### 标题5</span><br><span class="line">###### 标题6</span><br></pre></td></tr></table></figure><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**粗体文字两边各两个星号**</span><br><span class="line">*斜体是每边一个星号*</span><br><span class="line">~~删除线是每边两个波浪线~~</span><br><span class="line">==高亮字体是两边各两个等号==</span><br></pre></td></tr></table></figure><p><strong>粗体</strong></p><p><em>斜体</em></p><p><del>删除线</del></p><p>&#x3D;&#x3D;高亮&#x3D;&#x3D;</p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>英文符号的 &#96;&#96;&#96;加输入你要写的代码语言</p><p>例如&#96;&#96;&#96;javascript 就会生成一个书写javascript语言的代码块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params">min,max</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*(max-min+<span class="number">1</span>)+min)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用语法 有层级</span></span><br><span class="line">&gt;作者：梓川</span><br><span class="line">&gt;&gt;作者：梓川</span><br><span class="line">&gt;&gt;&gt;作者：梓川</span><br></pre></td></tr></table></figure><blockquote><p>作者：梓川</p><blockquote><p>作者：梓川</p><blockquote><p>作者：梓川</p></blockquote></blockquote></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分割线1</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">//分割线2</span></span><br><span class="line">***</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;分割线1</p><hr><p>&#x2F;&#x2F;分割线2</p><hr><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在线图片和本地图片插入格式一致，只是路径不同</span></span><br><span class="line"><span class="comment">//在线图片只需要把路径换成链接就好</span></span><br><span class="line">![我的图片](images/my.<span class="property">jpg</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/head.jpeg" alt="我的图片"></p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//超链接语法</span></span><br><span class="line">[我的github](<span class="attr">https</span>:<span class="comment">//github.com/zicuan123)</span></span><br><span class="line"><span class="comment">//注意在Typora软件中点击是不能跳转的，如果写到博客里就可以跳转了</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/zicuan123">我的github</a></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无序列表 -加空格 写好一个无序列表后直接回车，后续也是无序列表</span></span><br><span class="line">- 无序列表<span class="number">1</span></span><br><span class="line">- 无序列表<span class="number">2</span></span><br><span class="line">- 无序列表<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//有序列表 1+.+空格+文字 写好一个后回车也能生成无序列表</span></span><br></pre></td></tr></table></figure><ul><li>无序列表1</li><li>无序列表2</li><li>无序列表3</li></ul><ol><li>有序列表</li><li>有序列表</li><li>有序列表</li></ol><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>鼠标右键点击插入，选择表格，再选择几行几列自动生成表格了</p><table><thead><tr><th>姓名</th><th>语文</th><th>数学</th></tr></thead><tbody><tr><td>张三</td><td>18</td><td>99</td></tr><tr><td>李四</td><td>82</td><td>14</td></tr><tr><td>王五</td><td>99</td><td>99</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;markdown-简介&quot;&gt;&lt;a href=&quot;#markdown-简介&quot; class=&quot;headerlink&quot; title=&quot;markdown 简介&quot;&gt;&lt;/a&gt;markdown 简介&lt;/h2&gt;&lt;p&gt;Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档&lt;/p&gt;</summary>
    
    
    
    <category term="MarkDown" scheme="http://zicuan123.github.io/categories/MarkDown/"/>
    
    
    <category term="markdown" scheme="http://zicuan123.github.io/tags/markdown/"/>
    
  </entry>
  
</feed>
